{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Chao World Modding Documentation","text":"<p>Documentation version: 2.1.1</p> <p>This document serves to guide you through modding your Chao World, and is aimed at beginner modders looking to dip their feet into Sonic Adventure 2 Chao Modding.</p> <p>This is a rehaul of the old modding documentation, which was initially only used for Chao World Extended modding. In future versions of this document, other mods will be included in the documentation.</p> <p>To get started, click one of the items in the list on the left of this section!</p>"},{"location":"#changelog","title":"Changelog:","text":"<ul> <li> <p>Version 2.1.1</p> <ul> <li>Fixed: Clarification on versioning for SAIO and Blender</li> <li>Updated the guide to the new mod loader method (the new hotness!)</li> <li>Fixed: Lens documentation missing IDs</li> <li>Added: Chao Palletes and Textures guide</li> </ul> </li> <li> <p>Version 2.1.0</p> <ul> <li>Added: Character Chao using Custom Accessories.</li> <li>Added: Character Chao Warning for changing positions.</li> <li>Added: Nodes for horns in Animal Modding Reference Table.</li> <li>Added: Troubleshooting for Black Market bugs.</li> <li>Fixed: Custom Models in Lenses references Hats.</li> <li>Fixed: Fruit doesn't have registerRare and registerCommon function calls.</li> <li>Added: Warning about setting up projects, Don't use UWP DLL projects.</li> <li>Added: feature to check if CWE is loaded</li> </ul> </li> <li> <p>Version 2.0.1</p> <ul> <li>Fixed: Lens link not working (now added to the project code)</li> <li>added further code examples in Tools for users to peek into.</li> <li>Added Changelog for historical purposes.</li> </ul> </li> <li> <p>Version 2.0</p> <ul> <li>Initial Release of the new Chao World Modding Documentation.</li> </ul> </li> </ul>"},{"location":"AccessoryModding/","title":"Accessory Mods","text":""},{"location":"AccessoryModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Intermediate 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul> <p>Tools can be downloaded here</p>"},{"location":"AccessoryModding/#what-is-an-accessory","title":"What is an \"Accessory\"?","text":"<p>Accessories are a part of Chao World Extended, and have been around since version 8.3 as part of a customization model. Intially intended to expand on the ideas of hats, but without removing the Chao's head. It eventually got expanded in version 8.5 with full-body accessories. There are two methods to creating an accessory, so it'll be a longer guide than usual.</p>"},{"location":"AccessoryModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul>"},{"location":"AccessoryModding/#accessory-types","title":"Accessory Types:","text":"<p>As mentioned above, there are two types of accessories: Head accessories and Full Body Accessories. Both methods require different means of modelling so they will be gone into detail separately. The difference between head accessories and full body accessories are that head accessories work much like hats, but don't remove the head, and full body accessories allow you to rig your Chao to have the accessory follow them around.</p>"},{"location":"AccessoryModding/#modelling","title":"Modelling","text":""},{"location":"AccessoryModding/#importing-the-model","title":"Importing the model","text":"<p>In blender, bring up the properties panel by pressing N, and navigate to the SAIO Tools tab, then click import model.</p> <p></p> <p>Navigate to your project folder that you created with SA Tools (Should be in Sonic Adventure 2's folder under \"Projects\"), navigate to <code>Chao/Models/AL_RootObject</code> and select a Chao. Make sure that it is a sa2mdl file. For this example we will be using al_ncn.sa2mdl </p> <p>How to find what type your file is: Use the Reference page on what Chao filename you want.</p>"},{"location":"AccessoryModding/#head-accessories","title":"Head Accessories","text":"<p>Head accessories are similar to hats, so the process is pretty much the same.</p> <p>For head accessories, model or import your model where you want to place the accessory to be placed, minding the position of the head. Once your model is placed on the correct place, Add an Object Constraint, with the constraint being \"Child of\", and use the eyedropper on the head of your Chao.  Once done, click the \"Clear Inverse\" button to clear the Inverse Correction of the Child Constraint, putting it in place where it's supposed to be. On export, it will auto triangulate.</p> <p></p> <p>Note: There is a vertex limit of 32768 per model.</p> <p>Once done, delete the hierarchy of the Imported Chao.</p> <p></p>"},{"location":"AccessoryModding/#body-accessories","title":"Body Accessories","text":"<p>For body accessories, the process is much more involved, and would need you to generate an armature in order to rig the model. </p> <p>Before you begin, take your imported Chao and note the names of the body parts you will be adding vertex groups to. For example:</p> <pre><code>al_ncz:\n001_object_00016D7C - stomach\n003_object_000167CC - left arm\n010_object_00015B4C - right arm\n</code></pre> <p>Adjust for whichever Chao type you use.</p> <p>Select the 000 object and go to SAIO Tools -&gt; Armature from Objects. Press OK on the dialogue box to generate a new armature. Delete the imported Chao (the hierarchy starting with the 000 object) and let's begin!</p> <p></p> <p>Model or import your models over the parts you want to cover -- this can be any amount of body parts, be it hands, stomach, legs, or even wings! For this example, I'll be doing 4 parts - two on the stomach, one on the left arm, one on the right arm.</p> <p>Select each of your models that you have imported or modelled, and go to the \"Data\" panel in the properties sidebar, and create a new vertex group. Name the vertex group the same as the body part you want to bind it to. Do this for every model you are adding as an accessory.</p> <p></p> <p>select your items to bind to the body, select the bone that corresponds to the name of the object (make sure that the bone selected has a rounded square surrounding it) and press Ctrl+P to parent the bone (Do not use bone relative). go into pose mode (Ctrl+Tab) to test if the bone controls the accessory as well as the body part.</p> <p>If your bone controls the accessory as you like it, there is no need for the next step. If not, do the following:</p> <p>How to select bones</p> <p>Select the object of the bone you're looking for, then click on the bone icon in the outliner. If the bone has a rectangle border outline, it means you've done this correctly.</p> <p>weight paint your model by selecting your model (go out of pose mode by pressing Ctrl+Tab again), press A (to select all the faces), and go to the \"Data\" panel of your model you want to weight paint. A new section should appear where we defined the vertex groups. make sure the \"Weight\" slider is at 1.000 and click \"Assign\". This should make all the faces follow the bone we created. Tab out of Edit mode and follow the next step.</p> <p>delete all the \"attach_\" meshes that were created with the \"Armature from Objects\" process, and you're done! You now have a functional body accessory!</p> <p>Note: There is a vertex limit of 32768 per model.</p> <p></p>"},{"location":"AccessoryModding/#texturing-in-blender","title":"Texturing in Blender","text":"<p>Texture your model as you would when making a model, taking into mind the size of your UVs. A smaller UV size would be preferred to make loading quicker.</p> <p>Once done, open your texture menu in Blender, and open the SAIO Material Properties.</p> <p></p> <p>Check the \"Use Texture\" checkbox to use textures for your model (1), and make sure to set your texture ID (2). this corresponds to the local ID that will be loaded when you look it up in Texture Editor. Do this for any other materials you're applying to the model.</p> <p>Make to save and export your file as SA2MDL so that the texture information can be held by the file. You are now done with Blender and can safely close the file. Save a backup .blend file of your model just in case of complications or difficulties for someone to help out.</p>"},{"location":"AccessoryModding/#assigning-the-texture-in-texture-editor","title":"Assigning the texture in Texture Editor","text":"<p>Once you're done with setting the above settings on Blender, save your model and your texture and go to Texture Editor.</p> <p></p> <p>Add or remove the textures you want in the mod by clicking the \"Add...\" or \"Remove\" buttons at the bottom of the window (1). The index (2) corresponds to the Texture ID that you set in Blender. Create a unique Global ID (3) for each of your textures, so that your mod doesn't conflict with other mods.</p> <p>Save the texture file as <code>.PAK</code>, and keep it aside for later.</p>"},{"location":"AccessoryModding/#code","title":"Code:","text":"<p>If you have not created a Visual Studio project yet, follow the instructions on \"Setting up your development environment\".</p>"},{"location":"AccessoryModding/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p> <p>Clone or download <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code> from LibModUtils.</p> <p>To download the file in Github, click on each file you want, and click the download button on the right hand side of the header of the code preview.</p> <p></p> <p>Place these two files into your Visual Studio Project folder, where the other dependencies have been placed.</p> <p>You will need to change the first include in <code>ModelInfo.cpp</code> in order to fix a problem -- change <code>#include \"stdafx.h\"</code> to <code>#include \"pch.h\"</code>.</p> <p>If you don't replace the include, this error will occur!</p> <p></p> <p>Afterwards, Add the files into your project by right clicking \"Header Files\" in your project explorer and going to Add -&gt; Existing Item... to add <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code></p> <p></p>"},{"location":"AccessoryModding/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p>"},{"location":"AccessoryModding/#creating-accessory-ids","title":"Creating accessory IDs","text":"<p>Inside the <code>extern \"C\"</code> function, create an ID that we will use for accessories:</p> <pre><code>    int ExampleAccessoryID;\n</code></pre>"},{"location":"AccessoryModding/#creating-a-custom-texture-file","title":"Creating a custom Texture file:","text":"<p>Inside the <code>extern \"C\"</code> function, the following two lines:</p> <pre><code>NJS_TEXNAME ExampleTex[10];\nNJS_TEXLIST example_texlist = { arrayptrandlength(ExampleTex) };\n</code></pre> <p>Let's break these two lines down:</p> <p><code>NJS_TEXNAME</code> - The name of your texture loader. change <code>ExampleTex</code> with a unique name, and replace the number inside of the square brackets (the array assignment) to the amount of textures your mod will have.</p> <p><code>NJS_TEXLIST</code> - The texture list - Assign this to your <code>NJS_TEXNAME</code> so that it knows how to read it. Give it a unique name, since you reference this in any API calls that need your texture.</p> <p>Inside the CWELoad function, Load the texture file with the following code:</p> <pre><code>cwe_api-&gt;RegisterChaoTexlistLoad(\"ExampleTex\", &amp;example_texlist);\n</code></pre> <p><code>RegisterChaoTexlistLoad()</code> takes two arguments - The name of your texture file (without the .PAK at the end of it) and a reference call to the <code>NJS_TEXLIST</code> that you created.</p>"},{"location":"AccessoryModding/#adding-black-market-attributes","title":"Adding Black Market Attributes","text":"<p>Add the following code below the texture list variables: <pre><code>BlackMarketItemAttributes BMExampleAccessiry = { 1000, 500, 0, -1, -1, 0 };\n</code></pre></p> <p>Let's break it down:</p> <p><code>BlackMarketItemAttributes</code> - This is a struct inside of the CWE API which contains the following, in the following order:</p> <ul> <li> <p>PurchasePrice - The selling price of the item sold.</p> </li> <li> <p>SalePrice - the buying price if you're selling the item back to the Black Market.</p> </li> <li> <p>RequiredEmblems - The amount of emblems required in the game (0 to 180 is possible in game, anything higher and they will not be able to be purchased through the Black Market.)</p> </li> <li> <p>-1 - Name - Keep this as is, we define it in the RegisterChaoAccessory function.</p> </li> <li> <p>-1 - Description - Keep this as is, we define it in the RegisterChaoAccessory function.</p> </li> <li> <p>0 - Unknown - Keep this as is.</p> </li> </ul>"},{"location":"AccessoryModding/#adding-custom-models","title":"Adding Custom Models:","text":"<p>Create a <code>ModelInfo</code> pointer variable for each of the models you are about to add inside the <code>extern \"C\"</code> function. For example:</p> <pre><code>ModelInfo* MDLExampleAccessory;\n</code></pre> <p>This is empty at the moment, so let's define it. In the <code>Init</code> function. underneath the <code>pathStr</code> variable, add the following for each model:</p> <pre><code>MDLExampleAccessory = new ModelInfo(pathStr + \"ExampleAccessory.sa2mdl\");\n</code></pre> <p>Replace <code>MDLExampleAccessory</code> with whatever your <code>ModelInfo</code> pointer variable was called, and change the filename to the appropriate model.</p>"},{"location":"AccessoryModding/#adding-the-accessory","title":"Adding the accessory:","text":"<p>We will be using the two types of accessories to define what our <code>EAccessoryType</code> Are. An <code>EAccessoryType</code> allows us to provide a category so that people can use the accessory in that category (They can use one head, one body, one generic1, and one generic2 accessory.)</p> <p>Inside the CWELoad function, call the <code>RegisterChaoAccessory</code> function from the CWE API. For example:</p> <pre><code>    ExampleAccessoryID = cwe_api-&gt;RegisterChaoAccessory(Generic1, MDLExampleAccessory-&gt;getmodel(), &amp;example_texlist, &amp;BMExampleAccessory, \"Example Accessory\", \"Example Description\");\n</code></pre> <p>Let's break it down:</p> <p><code>cwe_api-&gt;RegisterChaoAccessory()</code> - this is the function call you need to make.</p> <p><code>Generic1</code> - this is <code>EAccessoryType</code> - This is separated into <code>Head</code> and <code>Face</code> for Head Accessories and <code>Generic1</code> and <code>Generic2</code> for body accessories.</p> <p><code>MDLExampleAccessory-&gt;getmodel()</code> - This has two parts: the <code>ModelInfo</code> pointer variable you created, and <code>getmodel()</code>, which assigns the model to the accessory.</p> <p><code>&amp;example_texlist</code> - This is a reference call to the texture list you created above.</p> <p><code>&amp;BMExampleAccessory</code> - This is the Black Market Attributes (the information needed for the Black Market to sell the item). This can be <code>NULL</code> referenced if you don't want to sell the accessory, and obtain it through other means.</p> <p><code>\"Example Accessory\"</code> - This is the name of the accessory.</p> <p><code>\"Example Description\"</code> - This is the description of the accessory.</p> <p>Do this for as many accessories as you wish to create! Reminder that there is a limit of 255 accessories, some taken up by CWE.</p>"},{"location":"AccessoryModding/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again. </p> <p>If you still can't get your build to work, try using the example mod as a template.</p>"},{"location":"AccessoryModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"AnimalModding/","title":"Custom Animal Mods","text":""},{"location":"AnimalModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Intermediate 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>An existing fruit mod.</li> <li>Patience</li> </ul> <p>Tools can be downloaded [here]</p>"},{"location":"AnimalModding/#what-is-an-animal","title":"What is an \"Animal\"?","text":"<p>Custom Animals are an extension of the Chao Animal system, where you can give a Chao the animal for it to absorb the animal and gain some of its parts randomly. Chao World Extended introduced custom animals from version 8.0, and allowed for customization from version 8.5. Animals spawn from fruit when looking away from the fruit. </p> <p>Custom Animals require a Fruit Mod so be sure to have created one before proceeding!</p>"},{"location":"AnimalModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul>"},{"location":"AnimalModding/#preparations","title":"Preparations","text":"<p>You will need the following before progressing further:</p> <ul> <li>An existing Fruit mod</li> <li>The Animal Editor Tool by Exant here</li> </ul>"},{"location":"AnimalModding/#modelling","title":"Modelling","text":""},{"location":"AnimalModding/#animal","title":"Animal","text":"<p>Import an animal from the <code>Chao/Animals</code> folder in your SA Tools Project. Any model will do, as long as the prefix is \"MINIMAL\" and ends in \".SA2MDL\". This will give you the required scale for reference of your model.</p> <p>Create the animal you want to add into the game, using the scale of the imported model as a reference of how large the animal has to be. Make sure to UV and texture the model as necessary.</p> <p>Create an Empty (Plain Axes is recommended) object at world origin (0, 0, 0) and parent all your animal meshes to the Empty object that was created.  Make sure that your animal's feet are on the \"floor\" (0 on the Z axis) of world space, so that the animal appears in the right location.</p> <p>Apply Scale and Rotation of your model, and make sure your model is complete at this point. Save your model in case anything goes wrong.</p> <p>Select the Empty object, and go to SAIO Tools -&gt; Armature from Objects. Press OK on the dialogue box to generate a new armature. Delete the original Empty hierarchy as we no longer need it. (You can create an incremental save in File -&gt; Save Incremental as this is the start of your modding process)</p> <p></p> <p>Your armature now needs to be tweaked so that the head of each of the bones are in the corect position. Select the head of each of the bones and move them as appropriate in Edit Mode. This step is optional, but will help for animating your rig when you get to that step.</p> <p>Save and export your animal as the SA2MDL format. This model will be used for the Animal Editor tool.</p>"},{"location":"AnimalModding/#animation","title":"Animation","text":"<p>There are 3 sets of animation for animals. The table below describes how many frames of animation are needed, as well as what animation types need to be keyed and created as \"animation nodes\":</p> Animation Type Frames required Stand 4 Frames Walk 15 Frames Hold/Use 14 Frames <p>Set your initial keyframe at 0, and the ending keyframe at the required number of frames. Animate as necessary, making sure the interpolation mode of your animation is set to linear (select your frames, press T, select \"linear\").</p> <p>Go to SAIO Tools -&gt; Export -&gt; Export Node Animation to each animation separately. This will save it as an .SAANIM file needed for the Animal Editor tool.</p>"},{"location":"AnimalModding/#chao","title":"Chao","text":"<p>Import a Chao model of your choice, starting with a Child Chao. Prepare the animal parts you wish to add to the Chao, hiding the original Chao body parts as you go along. You will need to name the body parts a specific way, so that the Animal Edior can recognize them on import. These names are case sensitive! Constrain each part to their respective \"Empty\" parent object.</p> Body Part Object Name Constraint Index Left Arm arm_l 003 Right Arm arm_r 010 Left Ear ear_l 024 Right Ear ear_r 026 Left Leg leg_l 006 Right Leg leg_r 013 Face tongue 028 Tail tail 008 Left Wing wing_l 008 Right Wing wing_r 039 Left Horn horn_l 030 Right Horn horn_r 031 <p>Delete the Chao hierarchy and save as an SA2MDL. This will be used in the Animal Editor as a Child Chao.</p> <p>OPTIONAL: Repeat the above steps for an Adult model if you want different models or textures for the adult. Save it as a second SA2MDL, which will be used for the Adult Chao.</p>"},{"location":"AnimalModding/#using-the-animal-editor-tool","title":"Using the Animal Editor Tool","text":"<p>Extract the Animal Editor tool to an easily accessible location, and open it. Load the files according to each of the items that was created in the modelling process. Your completed file should look as follows:</p> <p></p> <p>Click \"Export Code\" and save the .mini file to create a large text file containing your model and animation data. This will be used in the coding section.</p>"},{"location":"AnimalModding/#code","title":"Code","text":"<p>We will be using our fruit mod from a previous section. </p> <p>In order to proceed, we will need a fruit mod. Take your existing fruit mod that you made from the Fruit Modding Documentation to get started. If you do not have a fruit mod. Make one by clicking the link to get started!</p> <p>In the <code>main.cpp</code> file, inside the <code>extern \"C\"</code> function, include your <code>.mini</code> file that you created during your modelling process. The <code>.mini</code> file contains all your geometry and bindings for textures, so we will not need any more SA2MDL files at this point. For example:</p> <pre><code>#include \"ExampleAnimal.mini\"\n</code></pre> <p>Inside <code>CWELoad</code>, we will create an ID for the animal, using the .mini file's struct. At the bottom of the <code>.mini</code> file, you will find the following. Copy the variable name from your <code>CWE_MINIMAL</code> struct.</p> <p></p> <p>Next: create the variable, using the copied varaible name inside the <code>AddChaoMinimal</code> function. Make sure to reference the varaible as it's reading from the struct in the <code>.mini</code> file.</p> <pre><code>int mini_ExampleAnimalID = cwe_api-&gt;AddChaoMinimal(&amp;ExampleAnimal_entry);\n</code></pre> <p>Now we need to bind it to the fruit:</p> <pre><code>cwe_api-&gt;RegisterChaoMinimalFruit(ExampleFruitID, mini_ExampleAnimalID, 0, 50);\n</code></pre>"},{"location":"AnimalModding/#building-the-project","title":"Building the Project:","text":"<p>Since your fruit mod was already set up, all you need to do is click on Build -&gt; Build Solution, or press F6.</p>"},{"location":"AnimalModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place ONLY the SA2MDL Fruit models in your mod folder. Your animals are built into the mod DLL file, and there is no need to add the SA2MDL or SAANIM files.</p> <p>Update your textures to contain the animal textures your mod needs.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"BeginHelp/","title":"Asking for help:","text":"<p>Note</p> <p>This is written in the context of asking for help in Discord on servers capable of helping you with your mod. Similar rules may apply for other places where you ask for help.</p>"},{"location":"BeginHelp/#recommendations","title":"Recommendations","text":"<p>If you're stuck and are asking for help, the following is usually needed:</p> <ul> <li>Information on where you're stuck</li> <li>(if needed) a packed Blender file</li> <li>(if needed) a snippet of your code</li> <li>(if needed) a screenshot of your output</li> </ul> <p>Please provide as much information as possible on what you need help on. Doing so will alleviate the headaches of the people helping you. </p> <p>Asking \"How do I\" types of questions will get you pointed to the guides as they are there to give you a structured approach to completing your mod.</p>"},{"location":"BeginHelp/#how-to-pack-a-blender-file","title":"How to pack a Blender File","text":"<p>Go to File -&gt; External Data -&gt; Pack Resources. This will make the .blend file bigger, but will come with all the model and texture information needed.</p> <p>Save your file thereafter.</p>"},{"location":"BeginHelp/#how-to-send-a-snippet-of-code","title":"How to send a snippet of code","text":"<p>Discord allows for markdown of the code you're sending. press the ` key to type the ` special character. Encase some text in one ` for a single-line comment. For example:</p> <p>`Some code here`</p> <p>Which will show up as this:</p> <p><code>Some code here</code></p> <p>Discord also allows for syntax-highlighted code using ``` - You can also include a language! For example:</p> <p>```cpp</p> <p>PrintDebug(\"Here\");</p> <p>```</p> <p>Which will show up as this:</p> <pre><code>    #include \"ExampleAnimal.mini\"\n</code></pre> <p>It is recommended to use multiline code blocks (syntax-highlighted) so that it is easier for people to pinpoint your problem and explain a solution.</p>"},{"location":"BeginHelp/#how-to-take-a-screenshot-of-your-output","title":"How to take a screenshot of your output:","text":"<p>Windows has many ways to take a screenshot of your output. One example is the snipping tool shortcut:</p> <p>Win+Shift+S</p> <p>This opens an instant snipping tool window allowing you to quickly drag a rectangular region to copy into the clipboard. If you want to make changes before pasting into Discord, click your notification area and click the screenshot that you made, make the changes needed and click copy. You can then paste directly from the clipboard into Discord and type the description of what you need for help.</p> <p>Another way is to use Alt+Print Screen to capture the window and paste it into your clipboard. If you want to edit the screenshot, open your image editor of choice and paste it there before pasting it or sending it into Discord.</p>"},{"location":"CWEAPICodeTemplate/","title":"Chao World Extended API Code Template","text":"<p>The following code is a template to start off with CWE mods - This is the bare minimum of what can be used to start a mod using the CWE API. You may need to add more include statements for some mods to run properly (ie <code>SA2ModLoader.h</code> and <code>ModelInfo.h</code> for NJS and ModelInfo* objects) In every coding section of a mod using the CWE API, you will see this page come up as it is your boilerplate for starting a mod.</p> <p>Copy and paste the template code below and get started!</p> <pre><code>#include \"pch.h\"\n#include \"cwe_api.h\"\n#include \"ModelInfo.h\" //Not needed for FTNames.\n\nextern \"C\"\n{\n    //registering data functions. - Needs to exist.\n    void (*RegisterDataFunc)(void* ptr);\n\n    //main CWE Load function -- Important stuff like adding your CWE mod goes here\n    void CWELoad(CWE_REGAPI* cwe_api)\n    {\n\n    }\n\n    //initialization function - MUST exist in order to have CWE and SA2 see your mod\n    __declspec(dllexport) void Init(const char* path)\n    {\n        HMODULE h = GetModuleHandle(L\"CWE\");\n\n        std::string pathStr = std::string(path) + \"\\\\\";\n\n        RegisterDataFunc = (void (*)(void* ptr))GetProcAddress(h, \"RegisterDataFunc\");\n        RegisterDataFunc(CWELoad);\n    }\n    __declspec(dllexport) ModInfo SA2ModInfo = { ModLoaderVer };\n}\n</code></pre>"},{"location":"ChaoDataStruct/","title":"Chao Data Structure","text":"<p>Below, you'll find some useful values of the <code>ChaoDataBase</code> Struct which is used in the fruit stat function to modify the Chao's attributes accordingly. Please make sure to clamp your values as anything outside of the value scope will provide unintended consequences to the game and/or the Chao.</p> Data Type Variable Description char[7] Name Name of the Chao char[8] StatGrades Stat grades from D to S char[8] StatLevels Stat levels from 0 to 99 int16[8] StatPoints Stat points from 0 to 9999 ChaoType Type Type of Chao - View SA2Structs.h for more info char Garden Garden the Chao is in int16 Happiness Chao Happiness int16 InKindergarten Is the Chao in Kindergarten? int16 lifespan Lifespan 1 int16 lifespan2 Lifespan 2 int16 Reincarnations How many reincarnations a Chao had float PowerRun Power/Run Stat Influence, - for Power, + for Run float FlySwim Fly/Swim Stat Influence, - for Fly, + for Swim float Alignment Chao Alignment, -1 for Dark, 0 for Normal, 1 for Hero float EvolutionProgress Magnitude char HideFeet Hide the feet of the Chao? ChaoDNA DNA Chao DNA struct - view SA2Structs.h for more info <p>Some useful data structures to look at in <code>SA2Structs.h</code>:</p> <ul> <li>ChaoType</li> <li>ChaoEmotions</li> <li>ChaoCharacterBond</li> <li>ChaoDNA</li> </ul>"},{"location":"CharChaoCustomAccessories/","title":"Character Chao using Custom Accessories","text":"<p>This code was given to us by Exant and RAYTRAC3R for using accessories to evolve Character Chao:</p> <pre><code>    static bool ScarabEvolve(ObjectMaster* tp)\n    {\n        Uint16* accessories = (Uint16*)((int)(tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr) + 0x614);\n        Uint8 eye_color = *(Uint8*)((int)(tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr) + 0x59A);\n\n        if (eye_color == 7 &amp;&amp; accessories[Face] == (ScarabMaskID + 1))\n        {\n            //PrintDebug(\"Chao evolving into Scarab\");\n            return true;\n        }\n        else\n            return false;\n    }\n</code></pre> <p>Let's break it down:</p> <p><code>Uint16* accessories = (Uint16*)((int)(tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr) + 0x614);</code> - This points to the list of Accessory IDs. </p> <p><code>Uint8 eye_color = *(Uint8*)((int)(tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr) + 0x59A);</code> - This points to the eye color list.</p> <p>How do we use it in context of an accessory?</p> <p>Simple. We check for what type and add 1 to the number (the index is offset by 1)</p> <p>Let's make our own example:</p> <pre><code>static bool ExampleEvolve(ObjectMaster* tp)\n{\n        Uint16* accessories = (Uint16*)((int)(tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr) + 0x614);\n\n        if (accessories[Generic1] == ExampleAccessoryID + 1)\n        {\n            return true;\n        }\n}\n</code></pre> <p>as you can tell, we can utilize <code>Head</code>, <code>Face</code>, <code>Generic1</code> and <code>Generic2</code> inside the <code>accessories</code> variable we created, and we can find our accessory ID that way, too. We just have to add 1 to the index list otherwise we won't get wht we're looking for.</p>"},{"location":"CharacterChaoModding/","title":"Character Chao Modding","text":""},{"location":"CharacterChaoModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Intermediate 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul>"},{"location":"CharacterChaoModding/#what-is-a-character-chao","title":"What is a \"Character Chao\"?","text":"<p>Character Chao are special Chao that were used for events in Sonic Adventure 2: Battle for the Gamecube. The Amy, Tails and Knuckles Chao were distributed via a special disc that allowed for players to legitimately obtain them. With the advent of Chao Editors, it was possible to obtain these through the \"Chao Type\" option. Starting from Chao World Extended 9.5, and the CWE API, we are now able to create custom Character Chao.</p>"},{"location":"CharacterChaoModding/#modelling","title":"Modelling","text":""},{"location":"CharacterChaoModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul> <p>Things to bear in mind!</p> <ul> <li> <p>Character Chao are 40 nodes large, which means that there should be a combination of 40 objects, both empties and meshes. If you go any higher or lower, the game will output an error in the console!</p> </li> <li> <p>If you have any Vertex Color attributes, an error will appear in the console! remove any of them in the Data -&gt; Color Attributes menu by selecting them and pressing the - button on the right of the menu.</p> </li> </ul>"},{"location":"CharacterChaoModding/#preparation","title":"Preparation:","text":"<p>Start off by finding the closest reference to the Chao you want to create.  It can be any Chao model, as that will be your starting point for the Custom Character Chao. If you want smaller proportions, use a Child Chao. If you want bigger proportions, use an Adult Chao.</p> <p>Alter any of the existing geometry as you see fit in Edit Mode, minding for the current UVs.</p>"},{"location":"CharacterChaoModding/#optional-adding-new-geometry","title":"(Optional) Adding new Geometry","text":"<p>Add any new geometry on the Chao by making the necessary meshes as they should appear, bearing in mind the style of the Chao.</p> <p>Warning</p> <p>Do not UV map the extra geometry until you've joined the parts together. When joining, your UVs will disappear, meaning you will need to remap your UVs after you have joined them.</p> <p>Now that you have added geometry, select the items you want to join together, then select the item you want to join them with, and press Ctrl+J. This will join all the geometry into the destination object, and maintain the necessary flags in the object.</p> <p>To select the geometry that you have added in Edit Mode, deselect everything, hover your pointer over the geometry you want to edit, and press L. This will select the object so that you can UV Unwrap it. Mark seams as necessary before UV unwrapping.  If you're having trouble viewing the object, press / to go into local mode and focus on the object you have selected.</p> <p>Moving geometry</p> <p>If you move any of the geometry of the Chao, animations will break!</p>"},{"location":"CharacterChaoModding/#texturing","title":"Texturing","text":"<p>Heads up!</p> <p>ALL your textures have to be assigned and within the amount specified in the <code>TextureCount</code> variable! Make sure you make the TextureCount variable exactly the amount of textures you need! Anything out of bounds will output an error in the console!</p> <p>Texture your Custom Chao as you would any other model, taking into mind the amount of textures you use. If you want to create custom UVs for the Chao, this would be a prime opportunity to do so. Make sure the \"Use Texture\" checkbox is ticked for every texture you're adding, and make sure to apply a texture to all the texture slots of an associated model.</p> <p>Regarding the mouth:</p> <p>The mouth needs 2 material slots and 2 Texture IDs, much like the vanilla mouths.</p> <p>How Chao colors work:</p> <p>The texture that is used for the Character Chao skin is multiplied to the base color of the Chao. This means that the background of the texture should be \"white\" (Hue: 0, Saturation: 0, Value: 1).</p>"},{"location":"CharacterChaoModding/#using-saio-to-create-the-texture-file","title":"Using SAIO to create the texture file:","text":"<p>Set up your texturing environment by going to SAIO Scene -&gt; Textures and selecting the \"World\" texture list by clicking the globe icon on the left. Add every texture into the texture file by clicking the + button (1), assigning an image to the texture (2), Adding a name to the texture (3) and assigning a unique Global Index to your texture.</p> <p></p> <p>Note the number of textures you have added (in this case it was 7 - a trick is to look at the local Texture ID of the last item you've added, and add 1) - Note it down as this is your <code>TextureCount</code> when you set up the code to register the Chao.</p> <p>click the down arrow and click \"Export as Texture Archive\" and save it as a .PAK file.</p> <p>Regarding texture files:</p> <p>Because we're injecting into an already existing texture pack (al_body.prs), a separate texture file must be created for this project!</p>"},{"location":"CharacterChaoModding/#testing-if-all-models-are-assigned","title":"Testing if all models are assigned:","text":"<p>Go to SAIO Tools -&gt; Material and click the \"Update Material Textures\" button. If any of the material textures are black, you will need to assign textures to those models. Check the Texture ID to make sure it is within the range of your <code>TextureCount</code> as well.</p> <p>Export your SA2MDL model if everything goes well. Save a .blend file just in case something goes wrong!</p>"},{"location":"CharacterChaoModding/#coding","title":"Coding","text":"<p>If you have not created a Visual Studio project yet, follow the instructions on \"Setting up your development environment\".</p>"},{"location":"CharacterChaoModding/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p> <p>Clone or download <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code> from LibModUtils.</p> <p>To download the file in Github, click on each file you want, and click the download button on the right hand side of the header of the code preview.</p> <p></p> <p>Place these two files into your Visual Studio Project folder, where the other dependencies have been placed.</p> <p>You will need to change the first include in <code>ModelInfo.cpp</code> in order to fix a problem -- change <code>#include \"stdafx.h\"</code> to <code>#include \"pch.h\"</code>.</p> <p>If you don't replace the include, this error will occur!</p> <p></p> <p>Afterwards, Add the files into your project by right clicking \"Header Files\" in your project explorer and going to Add -&gt; Existing Item... to add <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code></p> <p></p>"},{"location":"CharacterChaoModding/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p>"},{"location":"CharacterChaoModding/#adding-custom-models","title":"Adding Custom Models:","text":"<p>Create a <code>ModelInfo</code> pointer variable for each of the models you are about to add inside the <code>extern \"C\"</code> function. For example:</p> <pre><code>ModelInfo* MDLExampleCharacterChao;\n</code></pre> <p>This is empty at the moment, so let's define it. In the <code>Init</code> function. underneath the <code>pathStr</code> variable, add the following for each model:</p> <pre><code>MDLExampleCharacterChao = new ModelInfo(pathStr + \"ExampleCharacterChao.sa2mdl\");\n</code></pre> <p>Replace <code>MDLExampleCharacterChao</code> with whatever your <code>ModelInfo</code> pointer variable was called, and change the filename to the appropriate model.</p>"},{"location":"CharacterChaoModding/#creating-the-evolution-function","title":"Creating the Evolution Function:","text":"<p>Create a static function pointer to evolve the Chao. The function pointer allows us to pick a requirement from <code>ObjectMaster</code> for our Chao to evolve. Place the function in <code>extern \"C\"</code>:</p> <pre><code>    static bool ExampleChaoEvolve(ObjectMaster* tp)\n    {\n        if (/* Your requirement here */)\n            return true;\n        else\n            return false;\n    }\n</code></pre> <p>Explore the <code>tp-&gt;Data1.Chao-&gt;ChaoDataBase_ptr-&gt;</code> structrure by pressing Ctrl+Space and scrolling down the Intellisense list to see what values you can use. If you want some examples of values you can use, go here! Take into mind what the struct varaible you use has as a data type.</p> <p>Using names</p> <p>To use a name to evolve the Chao, you will need to use a strcmp call to compare the name to the string you need. You also have to take into mind the Chao Name Encoding when writing your name. For example, when the Cosmo Chao mod was made, \"\\x23\\x4F\\x53\\x4D\\x4F\" was used as a condition to check for the name \"Cosmo\" - Take this into mind!</p> <p>Using custom accessories</p> <p>Go here to find out how to use custom accessories for the Evolution Function.</p>"},{"location":"CharacterChaoModding/#adding-the-custom-chao","title":"Adding the Custom Chao","text":"<p>Now we set up the Chao! In the <code>CWELoad</code> function, create a <code>CWE_API_CHAO_DATA</code> struct variable. For example:</p> <pre><code>    CWE_API_CHAO_DATA CharChao_pData =\n    {\n        MDLExampleChao-&gt;getmodel(), //pObject\n        {0},                        //pSecondEvoList[5]\n\n        \"ExampleChao\",              //TextureName\n        7,                          //TextureCount\n        0xFFFFFFFF,                 //IconColor - hex, 4 bytes, 0xAARRGGBB\n        ICON_TYPE_HALO,             //IconType\n        NULL,                       //pIconData\n\n        ExampleChaoEvolve,          //pEvolveFunc\n\n        0,                          //Flags\n        \"Example Chao\",             //Name\n        \"ExampleChao\",              //id\n    };\n</code></pre> <p>Let's break this down, since it's such a big structure:</p> <p><code>CWE_API_CHAO_DATA</code> - This is a struct which defines the necessary data needed for your Chao, inside the CWE API. It contains the following, in the following order:</p> <ul> <li> <p>pObject - Your Chao Model</p> </li> <li> <p>pSecondEvoList[5] - This is a custom Chao Evolution list, which is unsupported at the moment. Just use <code>{0}</code> for now.</p> </li> <li> <p>TextureName - This is your texture file to inject. Texlists are unsupported because of texture injection!</p> </li> <li> <p>TextureCount - This is the count of textures in your texture file. You should have noted this down in the modelling section of this guide.</p> </li> <li> <p>IconColor - This is a hexadecimal AARRGGBB number that gives you color to your <code>IconType</code></p> </li> <li> <p>IconType - There are 4 types you can use (3 supported at the moment) - <code>ICON_TYPE_BALL</code>, <code>ICON_TYPE_HALO</code>, <code>ICON_TYPE_SPIKY</code> and <code>ICON_TYPE_CUSTOM</code> (unsupported for now, don't use.) for your emoticon ball for your Chao.</p> </li> <li> <p>pIconData - A placeholder for custom emotion balls. Unsupported for now.</p> </li> <li> <p>pEvolveFunc - This is the Evolution Function that you created in the previous section to obtain your Chao.</p> </li> <li> <p>Flags - Keep at 0 for now. This is for the Custom Chao second evolution, which is unsupported at the moment.</p> </li> <li> <p>Name - This tells you the type of the Chao at the Health Center, and reflects on Krzys2 Chao Editor.</p> </li> <li> <p>ID - a text ID. This has to be null terminated and is used to place the Chao into CWE.</p> </li> </ul> <p>At the end of all of this, add your Chao Type just below your Character Chao struct:</p> <pre><code>    cwe_api-&gt;AddChaoType(&amp;CharChao_pData);\n</code></pre>"},{"location":"CharacterChaoModding/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again. </p> <p>If you still can't get your build to work, try using the example mod as a template.</p>"},{"location":"CharacterChaoModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"CheckCWE/","title":"Checking if CWE Exists","text":"<p>If you are making a mod that's dependent on CWE, you can optionally write it in code (SA Mod Manager now has the feature to ask for dependencies). Here's how:</p> <p>in <code>init()</code></p> <pre><code>HMODULE cwe = GetModuleHandle(\"CWE\");\nif(cwe) {\n  RegisterDataLoad = \n  ...\n}\n</code></pre> <p>where <code>...</code> replace with any CWE-dependent code that is needed.</p>"},{"location":"DevSetup/","title":"Setting up your development environment","text":"<p>Build types</p> <p>Make sure you have installed \"Desktop Development with C++\" as UWP DLL Projects will not work for Sonic Adventure 2 mods.</p> <ol> <li>Open Visual Studio (in the case of this guide, it will use 2022 Community edition)</li> <li>Create a new project -&gt; C++ -&gt; Dynamic Link Library (DLL)</li> <li>Name your project a suitable name, and place it somewhere easy to locate.  You will need to go to the folder to grab your DLL file once you've built it to create the mod.</li> </ol> <p></p>"},{"location":"FTNaming/","title":"Fortune Teller Name Mods","text":""},{"location":"FTNaming/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section</li> <li>Basic C++ Programming Skills</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul>"},{"location":"FTNaming/#what-is-a-fortune-teller-name","title":"What is a \"Fortune Teller Name\"","text":"<p>The Fortune teller in the Chao Kindergarten can give random names to a player which can be customized by adding names to the preset and CWE names. CWE names can be 12 characters long, and is the easiest of the Chao World Extended mods to make. All you need is your DLL Project and your <code>mod.ini</code> file.</p> <p>Note</p> <p>It is recommended to only use alphanumeric characters, as the fortune teller adding system does not support every type of character.</p>"},{"location":"FTNaming/#code","title":"Code:","text":""},{"location":"FTNaming/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p>"},{"location":"FTNaming/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p> <p>Above the CWELoad function, add a <code>char *</code> variable. For example:</p> <pre><code>char TestName[12] = \"testname\";\n</code></pre> <p>Inside the CWELoad function, use the <code>cwe_api</code> API method and call the <code>RegisterFoName()</code> function. <code>RegisterFoName()</code> takes one argument: the <code>char *</code> variable you created just outside the function.</p> <p>For example: </p> <pre><code>cwe_api-&gt;RegisterFoName(TestName);\n</code></pre>"},{"location":"FTNaming/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again.</p>"},{"location":"FTNaming/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Save your \"mod.ini\" file and test your mod!</p> <p>Disclaimer:</p> <p>As there are a lot of custom names in Chao World Extended, it may take some time for your custom name to appear. </p>"},{"location":"FruitModding/","title":"Fruit Mods","text":""},{"location":"FruitModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Basic 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul> <p>Tools can be downloaded here</p>"},{"location":"FruitModding/#what-is-a-fruit","title":"What is a \"Fruit\"?","text":"<p>Fruits are customizable food for your Chao, which allow you to generate stats, modify attributes of your Chao, and do many other sub-mods (Trees and Animals) in Chao World Extended.</p> <p>There are a limit of 255 fruit slots in total, some of which are already taken by Sonic Adventure 2 by default.</p>"},{"location":"FruitModding/#modelling","title":"Modelling","text":""},{"location":"FruitModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul> <p>Open Blender, and create your fruit. For example, I made a cherry. Follow standard 3D modelling practices while making the fruit, and don't worry too much about what polygons your fruit should be made out of. The model should auto-triangulate on export. </p> <p>merge your meshes!</p> <p>Merge your meshes by selecting all of them and pressing Ctrl+J in object mode. This will prevent issues in the Black Market.</p> <p>Note: There is a vertex limit of 32768.</p> <p></p>"},{"location":"FruitModding/#texturing-in-blender","title":"Texturing in Blender","text":"<p>Texture your model as you would when making a model, taking into mind the size of your UVs. A smaller UV size would be preferred to make loading quicker.</p> <p>Once done, open your texture menu in Blender, and open the SAIO Material Properties.</p> <p></p> <p>Check the \"Use Texture\" checkbox to use textures for your model (1), and make sure to set your texture ID (2). this corresponds to the local ID that will be loaded when you look it up in Texture Editor. Do this for any other materials you're applying to the model.</p>"},{"location":"FruitModding/#assigning-the-texture-in-texture-editor","title":"Assigning the texture in Texture Editor","text":"<p>Once you're done with setting the above settings on Blender, save your model and your texture and go to Texture Editor.</p> <p></p> <p>Add or remove the textures you want in the mod by clicking the \"Add...\" or \"Remove\" buttons at the bottom of the window (1). The index (2) corresponds to the Texture ID that you set in Blender. Create a unique Global ID (3) for each of your textures, so that your mod doesn't conflict with other mods.</p>"},{"location":"FruitModding/#coding","title":"Coding","text":"<p>If you have not created a Visual Studio project yet, follow the instructions on \"Setting up your development environment\".</p>"},{"location":"FruitModding/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p> <p>Clone or download <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code> from LibModUtils.</p> <p>To download the file in Github, click on each file you want, and click the download button on the right hand side of the header of the code preview.</p> <p></p> <p>Place these two files into your Visual Studio Project folder, where the other dependencies have been placed.</p> <p>You will need to change the first include in <code>ModelInfo.cpp</code> in order to fix a problem -- change <code>#include \"stdafx.h\"</code> to <code>#include \"pch.h\"</code>.</p> <p>If you don't replace the include, this error will occur!</p> <p></p> <p>Afterwards, Add the files into your project by right clicking \"Header Files\" in your project explorer and going to Add -&gt; Existing Item... to add <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code></p> <p></p>"},{"location":"FruitModding/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p>"},{"location":"FruitModding/#creating-a-custom-texture-file","title":"Creating a custom Texture file:","text":"<p>Inside the <code>extern \"C\"</code> function, the following two lines:</p> <pre><code>NJS_TEXNAME ExampleTex[10];\nNJS_TEXLIST example_texlist = { arrayptrandlength(ExampleTex) };\n</code></pre> <p>Let's break these two lines down:</p> <p><code>NJS_TEXNAME</code> - The name of your texture loader. change <code>ExampleTex</code> with a unique name, and replace the number inside of the square brackets (the array assignment) to the amount of textures your mod will have.</p> <p><code>NJS_TEXLIST</code> - The texture list - Assign this to your <code>NJS_TEXNAME</code> so that it knows how to read it. Give it a unique name, since you reference this in any API calls that need your texture.</p> <p>Inside the CWELoad function, Load the texture file with the following code:</p> <pre><code>cwe_api-&gt;RegisterChaoTexlistLoad(\"ExampleTex\", &amp;example_texlist);\n</code></pre> <p><code>RegisterChaoTexlistLoad()</code> takes two arguments - The name of your texture file (without the .PAK at the end of it) and a reference call to the <code>NJS_TEXLIST</code> that you created.</p>"},{"location":"FruitModding/#adding-black-market-attributes","title":"Adding Black Market Attributes","text":"<p>Add the following code below the texture list variables: <pre><code>BlackMarketItemAttributes BMExampleFruit = { 1000, 500, 0, -1, -1, 0 };\n</code></pre></p> <p>Let's break it down:</p> <p><code>BlackMarketItemAttributes</code> - This is a struct inside of the CWE API which contains the following, in the following order:</p> <ul> <li> <p>PurchasePrice - The selling price of the item sold.</p> </li> <li> <p>SalePrice - the buying price if you're selling the item back to the Black Market.</p> </li> <li> <p>RequiredEmblems - The amount of emblems required in the game (0 to 180 is possible in game, anything higher and they will not be able to be purchased through the Black Market.)</p> </li> <li> <p>-1 - Name - Keep this as is, we define it in the AddFruit function.</p> </li> <li> <p>-1 - Description - Keep this as is, we define it in the AddFruit function.</p> </li> <li> <p>0 - Unknown - Keep this as is.</p> </li> </ul>"},{"location":"FruitModding/#adding-custom-models","title":"Adding Custom Models:","text":"<p>Create a <code>ModelInfo</code> pointer variable for each of the models you are about to add inside the <code>extern \"C\"</code> function. For example:</p> <pre><code>ModelInfo* MDLExampleFruit;\n</code></pre> <p>This is empty at the moment, so let's define it. In the <code>Init</code> function. underneath the <code>pathStr</code> variable, add the following for each model:</p> <pre><code>MDLExampleFruit = new ModelInfo(pathStr + \"ExampleFruit.sa2mdl\");\n</code></pre> <p>Replace <code>MDLExampleFruit</code> with whatever your <code>ModelInfo</code> pointer variable was called, and change the filename to the appropriate model.</p>"},{"location":"FruitModding/#adding-a-custom-id-for-the-fruit","title":"Adding a custom ID for the Fruit:","text":"<p>Chao Fruit need an ID so that we can set which Black Market Fruit register to go to. There are two Black Market Fruit registers: General Black Market (for more general purpose fruit where you want them to show up often) and Rare Black Market Fruit (use this for rarer fruit that you don't want to see as often.)</p> <p>In the <code>extern \"C\"</code> function, we make a custom Fruit ID like the following:</p> <pre><code>    int exampleFruitID;\n</code></pre> <p>This allows us to assign the fruit register to a static ID.</p>"},{"location":"FruitModding/#adding-the-fruit","title":"Adding the Fruit:","text":"<p>For fruit, you will need the following:</p> <ul> <li>the model and the texture code you created in previous steps</li> <li>the fruit ID</li> <li>the BlackMarketItemAttributes you created</li> <li>General stat manipulation.</li> <li>A function for stats to be manipulated - we will create this next (this is optional and will be covered.)</li> <li>The name of the fruit</li> <li>The desctiption of the fruit</li> </ul>"},{"location":"FruitModding/#optional-stat-function","title":"Optional: Stat Function:","text":"<p>Let's create the function for stats to be manipulated. Place this inside the <code>extern \"C\"</code> function, outside of the scope of <code>CWELoad</code>:</p> <pre><code>    void __cdecl customFruitFunction(ChaoData* data, ObjectMaster* fruit)\n    {\n\n    }\n</code></pre> <p>This function, named <code>customFruitFunction</code> contains two arguments: <code>ChaoData* data</code> and <code>ObjectMaster* fruit</code>.  Since it's empty, we need to add something in it for a Chao to do something. Let's make the Chao happier once it's done eating.</p> <p>Inside of the <code>customFruitFunction</code>, we can add the following:</p> <pre><code>    data-&gt;data.Happiness += 0.1;\n</code></pre> <p>When a Chao eats a fruit, its happiness will increase by 0.1.</p> <p>You can create as many <code>customFruitFunction</code>s as you'd like for each of the fruits you are adding, just make sure to give them a unique name.</p> <p>For a reference of some of ChaoData*'s useful variables, click here!</p>"},{"location":"FruitModding/#fruit-stats","title":"Fruit Stats:","text":"<p>Next, let's let's add some stats to the fruit.  Each bite will give a fraction of how much you define here. Define this varaible inside the <code>extern \"C\"</code> function:</p> <pre><code>    ChaoItemStats customFruitStats = { 10, 10, 0, 0, 0, 0, 0, 0, 0, 0 }; //mood, belly, swim, fly, run, power, stamina, luck, intel, unknown;\n</code></pre>"},{"location":"FruitModding/#fruit-loading-function","title":"Fruit Loading function:","text":"<p>Now it's time to add the fruit! in the <code>CWELoad</code> function, call the <code>RegisterChaoFruit</code> function from the CWE API. For example:</p> <pre><code>ExampleFruitID = cwe_api-&gt;RegisterChaoFruit(MDLExampleFruit-&gt;getmodel(), &amp;example_texlist, &amp;customFruitStats, &amp;BMExampleFruit, customFruitFunction, \"Example Fruit\", \"Example Fruit Description\");\n</code></pre> <p>Let's break it down:</p> <p><code>cwe_api-&gt;RegisterChaoFruit()</code> - this is the function call you will need to make.</p> <p><code>MDLExampleFruit-&gt;getmodel()</code> - This has two parts: the <code>ModelInfo</code> pointer variable you created, and <code>getmodel()</code>, which assigns the model to the fruit.</p> <p><code>&amp;example_texlist</code> - This is a reference call to the texture list you created above.</p> <p><code>&amp;customFriutStats</code> - This is a reference call to the fruit stats that you created above.</p> <p><code>&amp;BMExampleFruit</code> - This is the Black Market Attributes (the information needed for the Black Market to sell the item). This can be <code>NULL</code> referenced if you don't want to sell the fruit, and obtain it through other means (like using it for a tree).</p> <p><code>customFruitFunction</code> - this is the function call that we made to increase the Chao's happiness, for example. we can null reference it by typing <code>NULL</code> instead of the function, for example:</p> <pre><code>cwe_api-&gt;RegisterChaoFruit(MDLExampleFruit-&gt;getmodel(), &amp;example_texlist, &amp;customFruitStats, &amp;BMExampleFruit, NULL, \"Example Fruit\", \"Example Fruit Description\");\n</code></pre> <p><code>\"Example Fruit\"</code> - This is the name of the fruit.</p> <p><code>\"Example Fruit Description\"</code> - this is the description for the fruit.</p>"},{"location":"FruitModding/#registering-the-fruit-to-a-black-market-fruit-register","title":"Registering the fruit to a Black Market Fruit Register","text":"<p>Now, we add a Black Market Fruit Register to make your fruit available in the Black Market.</p>"},{"location":"FruitModding/#general-black-market-fruit-register","title":"General Black Market Fruit Register","text":"<p>Below your Fruit Loading function, use this code to place the fruit in the general Black Market Fruit Register. This will be where your most common fruit appear.</p> <pre><code>   cwe_api-&gt;RegisterBlackMarketGeneralFruit(exampleFruitID, 50); \n</code></pre> <p>Let's break this down:</p> <p><code>exampleFruitID</code> - This is the fruit ID you want to add to the Black Market.</p> <p><code>50</code> - this is the <code>chance</code> variable, an integer number between 0 and 100 for the percent chance a fruit will appear.</p>"},{"location":"FruitModding/#rare-black-market-fruit-register","title":"Rare Black Market Fruit Register","text":"<p>Below your Fruit Loading function, use this code to place the fruit in the general Black Market Fruit Register. This will be where your rare fruit will appear.</p> <pre><code>    cwe_api-&gt;RegisterBlackMarketRareFruit(exampleFruitID, 50);\n</code></pre> <p>Let's break this down:</p> <p><code>exampleFruitID</code> - This is the fruit ID you want to add to the Black Market.</p> <p><code>50</code> - this is the <code>chance</code> variable, an integer number between 0 and 100 for the percent chance a fruit will appear.</p> <p>Do this for as many fruits as you wish to create! Reminder that there is a limit of 255 fruit.</p>"},{"location":"FruitModding/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again. </p> <p>If you still can't get your build to work, try using the example mod as a template.</p>"},{"location":"FruitModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"HatModding/","title":"Hat Mods","text":""},{"location":"HatModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Basic 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul> <p>Tools can be downloaded here</p>"},{"location":"HatModding/#what-is-a-hat","title":"What is a \"Hat\"?","text":"<p>Hats are the classic style of accessory given to you by Sonic Adventure 2, where a Chao is able to pick up the hat and place it on their head, replacing it with the model. Do note the skeleton dog has to have at least been used once in order for a Chao to wear a hat. You can find skeleton dogs in Pumpkin Hill Zone which will help you along your way.</p> <p>There are a limit of 255 hat slots in total, some of which are already taken by Sonic Adventure 2 by default.</p> <p>Minor Change since previous documentation:</p> <p>In the previous documentation, Head accessories were considered as \"hats\" - Now that the API allows you to add vanilla hats, they are categorized differently, but the method is the same. If you want to create a Head accessory, click here!</p>"},{"location":"HatModding/#modelling","title":"Modelling","text":""},{"location":"HatModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul>"},{"location":"HatModding/#importing-the-model","title":"Importing the model","text":"<p>In blender, bring up the properties panel by pressing N, and navigate to the SAIO Tools tab, then click import model.</p> <p></p> <p>Navigate to your project folder that you created with SA Tools (Should be in Sonic Adventure 2's folder under \"Projects\"), navigate to <code>Chao/Models/AL_RootObject</code> and select a Chao. Make sure that it is a sa2mdl file. For this example we will be using al_ncn.sa2mdl </p> <p>How to find what type your file is: Use the Reference page on what Chao filename you want.</p>"},{"location":"HatModding/#modelling-the-hat","title":"Modelling the hat","text":"<p>For hats, model or import your model over the head of the Chao, minding the position of the head. Once your model is placed in the correct place, Add an Object Constraint, with the constraint being \"Child of\", and use the eyedropper on the head of your Chao.  Once done, click the \"Clear Inverse\" button to clear the Inverse Correction of the Child Constraint, putting it in place where it's supposed to be. On export, it will auto triangulate.</p> <p></p> <p>Note: There is a vertex limit of 32768.</p> <p>Once done, delete the hierarchy of the Imported Chao.</p> <p></p> <p>Below, is the example of the sample model I made for the hat mod.</p> <p></p>"},{"location":"HatModding/#texturing-in-blender","title":"Texturing in Blender","text":"<p>Texture your model as you would when making a model, taking into mind the size of your UVs. A smaller UV size would be preferred to make loading quicker.</p> <p>Once done, open your texture menu in Blender, and open the SAIO Material Properties.</p> <p></p> <p>Check the \"Use Texture\" checkbox to use textures for your model (1), and make sure to set your texture ID (2). this corresponds to the local ID that will be loaded when you look it up in Texture Editor. Do this for any other materials you're applying to the model.</p> <p>Make to save and export your file as SA2MDL so that the texture information can be held by the file. You are now done with Blender and can safely close the file. Save a backup .blend file of your model just in case of complications or difficulties for someone to help out.</p>"},{"location":"HatModding/#assigning-the-texture-in-texture-editor","title":"Assigning the texture in Texture Editor","text":"<p>Once you're done with setting the above settings on Blender, save your model and your texture and go to Texture Editor.</p> <p></p> <p>Add or remove the textures you want in the mod by clicking the \"Add...\" or \"Remove\" buttons at the bottom of the window (1). The index (2) corresponds to the Texture ID that you set in Blender. Create a unique Global ID (3) for each of your textures, so that your mod doesn't conflict with other mods.</p> <p>Save the texture file as <code>.PAK</code>, and keep it aside for later.</p>"},{"location":"HatModding/#code","title":"Code:","text":"<p>If you have not created a Visual Studio project yet, follow the instructions on \"Setting up your development environment\".</p>"},{"location":"HatModding/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p> <p>Clone or download <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code> from LibModUtils.</p> <p>To download the file in Github, click on each file you want, and click the download button on the right hand side of the header of the code preview.</p> <p></p> <p>Place these two files into your Visual Studio Project folder, where the other dependencies have been placed.</p> <p>You will need to change the first include in <code>ModelInfo.cpp</code> in order to fix a problem -- change <code>#include \"stdafx.h\"</code> to <code>#include \"pch.h\"</code>.</p> <p>If you don't replace the include, this error will occur!</p> <p></p> <p>Afterwards, Add the files into your project by right clicking \"Header Files\" in your project explorer and going to Add -&gt; Existing Item... to add <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code></p> <p></p>"},{"location":"HatModding/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p>"},{"location":"HatModding/#creating-a-custom-texture-file","title":"Creating a custom Texture file:","text":"<p>Inside the <code>extern \"C\"</code> function, the following two lines:</p> <pre><code>NJS_TEXNAME ExampleTex[10];\nNJS_TEXLIST example_texlist = { arrayptrandlength(ExampleTex) };\n</code></pre> <p>Let's break these two lines down:</p> <p><code>NJS_TEXNAME</code> - The name of your texture loader. change <code>ExampleTex</code> with a unique name, and replace the number inside of the square brackets (the array assignment) to the amount of textures your mod will have.</p> <p><code>NJS_TEXLIST</code> - The texture list - Assign this to your <code>NJS_TEXNAME</code> so that it knows how to read it. Give it a unique name, since you reference this in any API calls that need your texture.</p> <p>Inside the CWELoad function, Load the texture file with the following code:</p> <pre><code>cwe_api-&gt;RegisterChaoTexlistLoad(\"ExampleTex\", &amp;example_texlist);\n</code></pre> <p><code>RegisterChaoTexlistLoad()</code> takes two arguments - The name of your texture file (without the .PAK at the end of it) and a reference call to the <code>NJS_TEXLIST</code> that you created.</p>"},{"location":"HatModding/#adding-black-market-attributes","title":"Adding Black Market Attributes","text":"<p>Add the following code below the texture list variables: <pre><code>BlackMarketItemAttributes BMExampleHat = { 1000, 500, 0, -1, -1, 0 };\n</code></pre></p> <p>Let's break it down:</p> <p><code>BlackMarketItemAttributes</code> - This is a struct inside of the CWE API which contains the following, in the following order:</p> <ul> <li> <p>PurchasePrice - The selling price of the item sold.</p> </li> <li> <p>SalePrice - the buying price if you're selling the item back to the Black Market.</p> </li> <li> <p>RequiredEmblems - The amount of emblems required in the game (0 to 180 is possible in game, anything higher and they will not be able to be purchased through the Black Market.)</p> </li> <li> <p>-1 - Name - Keep this as is, we define it in the AddHat function.</p> </li> <li> <p>-1 - Description - Keep this as is, we define it in the AddHat function.</p> </li> <li> <p>0 - Unknown - Keep this as is.</p> </li> </ul>"},{"location":"HatModding/#adding-custom-models","title":"Adding Custom Models:","text":"<p>Create a <code>ModelInfo</code> pointer variable for each of the models you are about to add inside the <code>extern \"C\"</code> function. For example:</p> <pre><code>ModelInfo* MDLExampleHat;\n</code></pre> <p>This is empty at the moment, so let's define it. In the <code>Init</code> function. underneath the <code>pathStr</code> variable, add the following for each model:</p> <pre><code>MDLExampleHat = new ModelInfo(pathStr + \"ExampleHat.sa2mdl\");\n</code></pre> <p>Replace <code>MDLExampleHat</code> with whatever your <code>ModelInfo</code> pointer variable was called, and change the filename to the appropriate model.</p>"},{"location":"HatModding/#adding-the-hat","title":"Adding the hat:","text":"<p>Now it's time to add the hat! In the CWELoad function, call the <code>AddChaoHat</code> function from the CWE API. For example: <pre><code>cwe_api-&gt;AddChaoHat(MDLExampleHat-&gt;getmodel(), &amp;example_texlist, &amp;BMExampleHat, \"Example Hat\", \"Example Hat Description\");\n</code></pre></p> <p>Let's break it down:</p> <p><code>cwe_api-&gt;AddChaoHat()</code> - This is the function call you will need to make.</p> <p><code>MDLExampleHat-&gt;getmodel()</code> - This has two parts: the <code>ModelInfo</code> pointer variable you created, and <code>getmodel()</code>, which assigns the model to the Chao Hat.</p> <p><code>&amp;example_texlist</code> - This is a reference call to the texture list you created above.</p> <p><code>&amp;BMExampleHat</code> - This is the Black Market Attributes (the information needed for the Black Market to sell the item). This can be <code>NULL</code> referenced if you don't want to sell the hat, and obtain it through other means.</p> <p><code>\"Example Hat\"</code> - This is the name of the hat.</p> <p><code>\"Example Hat Description\"</code> - This is the description of the hat.</p> <p>Do this for as many hats that you wish to create! reminder that there is a limit of 255 hats, some taken up by the vanilla game (this includes eggs, too).</p>"},{"location":"HatModding/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again. </p> <p>If you still can't get your build to work, try using the example mod as a template.</p>"},{"location":"HatModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"LensModding/","title":"Custom Lenses","text":""},{"location":"LensModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Basic 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>Patience</li> </ul> <p>Tools can be downloaded here</p>"},{"location":"LensModding/#what-is-a-lens","title":"What is a \"Lens\"","text":"<p>Lenses are a Chao World Extended addition, allowing you to change the texture of your Chao's eyes. They were introduced in Version 8 alongside the Custom Animal system, and are now available for customization and modification (&gt;version 9.5)</p>"},{"location":"LensModding/#modelling","title":"Modelling","text":"<p>Advice</p> <p>Chao World Extended has a stock lens available. If you want to skip modelling a lens case, click here to download the stock lens!</p>"},{"location":"LensModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul>"},{"location":"LensModding/#things-you-will-need","title":"Things you will need:","text":"<ul> <li>A texture for the eyes (make sure they fit within the eye spec of a Chao model, test as appropriate)</li> <li>A model for your lens case.</li> </ul>"},{"location":"LensModding/#texturing","title":"texturing","text":"<p>The following textures are needed in the following order:</p> <ul> <li>Default lens</li> <li>Small eyes</li> <li>Dark Chao eyes</li> <li>Hero Chao eyes</li> <li>Neutral Chaos Chao eyes</li> <li>Hero Chaos Chao eyes</li> <li>Dark Chaos Chao eyes</li> </ul> <p>You're allowed to add any textures needed for the lens casing thereafter.</p> <p>Note</p> <p>Hero and Dark swap around for Chaos Chao eyes. Bear this in mind.</p>"},{"location":"LensModding/#code","title":"Code:","text":"<p>If you have not created a Visual Studio project yet, follow the instructions on \"Setting up your development environment\".</p>"},{"location":"LensModding/#adding-the-dependencies","title":"Adding the dependencies:","text":"<p>Go into your Sonic Adventure 2 folder, and find the \"programming\" directory. Copy all of the files into your Visual Studio Project folder.</p> <p></p> <p>For advanced users, the most up-to-date dependencies can be found in Tools inside the \"SA2Modloader includes\" github page.</p> <p>Clone or download <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code> from LibModUtils.</p> <p>To download the file in Github, click on each file you want, and click the download button on the right hand side of the header of the code preview.</p> <p></p> <p>Place these two files into your Visual Studio Project folder, where the other dependencies have been placed.</p> <p>You will need to change the first include in <code>ModelInfo.cpp</code> in order to fix a problem -- change <code>#include \"stdafx.h\"</code> to <code>#include \"pch.h\"</code>.</p> <p>If you don't replace the include, this error will occur!</p> <p></p> <p>Afterwards, Add the files into your project by right clicking \"Header Files\" in your project explorer and going to Add -&gt; Existing Item... to add <code>ModelInfo.h</code> and <code>ModelInfo.cpp</code></p> <p></p>"},{"location":"LensModding/#copying-the-boilerplate-code","title":"Copying the boilerplate code:","text":"<p>Add a new source file and call it <code>main.cpp</code></p> <p>Copy the Chao World Extended API Code Template and paste it into the fresh <code>main.cpp</code> file that you've added to the Visual Studio project.</p>"},{"location":"LensModding/#creating-a-custom-texture-file","title":"Creating a custom Texture file:","text":"<p>Inside the <code>extern \"C\"</code> function, the following two lines:</p> <pre><code>NJS_TEXNAME ExampleTex[10];\nNJS_TEXLIST example_texlist = { arrayptrandlength(ExampleTex) };\n</code></pre> <p>Let's break these two lines down:</p> <p><code>NJS_TEXNAME</code> - The name of your texture loader. change <code>ExampleTex</code> with a unique name, and replace the number inside of the square brackets (the array assignment) to the amount of textures your mod will have.</p> <p><code>NJS_TEXLIST</code> - The texture list - Assign this to your <code>NJS_TEXNAME</code> so that it knows how to read it. Give it a unique name, since you reference this in any API calls that need your texture.</p> <p>Inside the CWELoad function, Load the texture file with the following code:</p> <pre><code>cwe_api-&gt;RegisterChaoTexlistLoad(\"ExampleTex\", &amp;example_texlist);\n</code></pre> <p><code>RegisterChaoTexlistLoad()</code> takes two arguments - The name of your texture file (without the .PAK at the end of it) and a reference call to the <code>NJS_TEXLIST</code> that you created.</p>"},{"location":"LensModding/#adding-black-market-attributes","title":"Adding Black Market Attributes","text":"<p>Add the following code below the texture list variables: <pre><code>BlackMarketItemAttributes BMExampleLens = { 1000, 500, 0, -1, -1, 0 };\n</code></pre></p> <p>Let's break it down:</p> <p><code>BlackMarketItemAttributes</code> - This is a struct inside of the CWE API which contains the following, in the following order:</p> <ul> <li> <p>PurchasePrice - The selling price of the item sold.</p> </li> <li> <p>SalePrice - the buying price if you're selling the item back to the Black Market.</p> </li> <li> <p>RequiredEmblems - The amount of emblems required in the game (0 to 180 is possible in game, anything higher and they will not be able to be purchased through the Black Market.)</p> </li> <li> <p>-1 - Name - Keep this as is, we define it in the AddLens function.</p> </li> <li> <p>-1 - Description - Keep this as is, we define it in the AddLens function.</p> </li> <li> <p>0 - Unknown - Keep this as is.</p> </li> </ul>"},{"location":"LensModding/#adding-custom-models","title":"Adding Custom Models:","text":"<p>Create a <code>ModelInfo</code> pointer variable for each of the models you are about to add inside the <code>extern \"C\"</code> function. For example:</p> <pre><code>ModelInfo* MDLExampleHat;\n</code></pre> <p>This is empty at the moment, so let's define it. In the <code>Init</code> function. underneath the <code>pathStr</code> variable, add the following for each model:</p> <pre><code>MDLExampleLens = new ModelInfo(pathStr + \"ExampleLens.sa2mdl\");\n</code></pre> <p>Replace <code>MDLExampleLens</code> with whatever your <code>ModelInfo</code> pointer variable was called, and change the filename to the appropriate model.</p>"},{"location":"LensModding/#adding-the-lens","title":"Adding the Lens","text":"<p>There's a few things we will need to add before a lens is able to be registered. In the <code>Extern \"C\"</code> function, add the following line just below the <code>RegisterDataFunc</code> function pointer:</p> <pre><code>    //Lens function - Needed for CWE to recognize the lens.\n    __declspec(dllexport) void(__cdecl* ALS_LensSpecial)(ObjectMaster*, ObjectMaster*);\n</code></pre> <p>After the line we just added, Generate an ID for each of the lenses you are making:</p> <pre><code>    //Generate an ID for each lens\n    int ExampleLensID;\n</code></pre> <p>In the <code>Init</code> function, add the following line just below the <code>PathStr</code> varaible:</p> <pre><code>    //Lens function - This talks to CWE to get the lens to work when registering it as a special object.\n    ALS_LensSpecial = (decltype(ALS_LensSpecial))GetProcAddress(GetModuleHandle(L\"CWE\"), \"ALS_LensSpecial\");\n</code></pre> <p>Now assign the lens ID to the <code>RegisterChaoSpecial()</code> function, to register it to the Black Market:</p> <pre><code>    //Register your lens to the black market:\n    ExampleLensID = cwe_api-&gt;RegisterChaoSpecial(MDLExampleLensBox-&gt;getmodel(), &amp;Example_texlist, &amp;BMExampleLens, ALS_LensSpecial, NULL, \"Lens Name\", \"Lens Description\", false);\n</code></pre> <p>And associate the lens with your texture:</p> <pre><code>//Associate the lens as a custom eye color:\ncwe_api-&gt;RegisterEyeColor(\"ExampleTextureName\", &amp;Example_texlist, ExampleLensID);\n</code></pre>"},{"location":"LensModding/#building-the-project","title":"Building the Project:","text":"<p>Your solution configuration should be \"Release\" and your solution platform should be \"x86\" so that your mod is small, and does not have the additional code inside your mod. Your configurations should look like the following image below:</p> <p></p> <p>Build the project by pressing F6 or going to Build -&gt; Build Solution. If you have a \"Build Succeeded\" in your tooltip at the bottom left of your Visual Studio window, proceed. If you have a \"Build Failed\" message, have a look at the Sample mod to see where you went wrong, and try again. </p> <p>If you still can't get your build to work, try using the example mod as a template.</p>"},{"location":"LensModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"MakingProject/","title":"Making a project","text":""},{"location":"MakingProject/#requirements","title":"Requirements","text":"<ul> <li>Sonic Adventure 2</li> <li>Latest SA Tools</li> </ul> <p>See Tools to download these required tools if you haven't already.</p>"},{"location":"MakingProject/#old-method-manually-making-a-mod-folder","title":"Old Method: Manually making a mod folder","text":""},{"location":"MakingProject/#setting-up-a-mod-folder","title":"Setting up a mod folder:","text":"<ol> <li>Create a folder in the /Mods folder in Sonic Adventure 2</li> <li>Create a new \"mod.ini\" file</li> <li> <p>Add the following text, entering the parameters required for the mod:</p> <pre><code>Name=\nAuthor=\nVersion=\nDescription=\nGitHubRepo=\nGitHubAsset=\nUpdateUrl=\nDLLFile=\nCategory=\n</code></pre> </li> </ol>"},{"location":"MakingProject/#new-method-samodmanager","title":"New Method: SAModManager","text":"<ol> <li>Open SA Mod Manager and click on \"New Mod\"</li> </ol> <ol> <li>Click on \"New Mod (For developers)\" and click \"OK\"</li> </ol> <ol> <li>Fill out the information on the \"Mod Info\" tab</li> </ol> <ol> <li>Move over to the \"Update Info\" tab if you want to autoupdate your mod (optional) and fill out the information there, too! For Github, you just need your author and repository info, and the release asset to update as necessary. For Gamebanana you just need the mod ID (found in your mod page)</li> </ol> <ol> <li>Your mod folder will be automatically made for you. The mod folder will open once it has been created, and you're ready for the next step.</li> </ol>"},{"location":"MakingProject/#creating-a-project","title":"Creating a project","text":"<p>You should have your own SA2MDL files for Chao modification, as you will be constantly using them as references. This uses SA Tools to create a project structure that will rip the necessary models.</p> <ol> <li>Open SAToolsHub.exe</li> <li>Go to Projects -&gt; New Project.<ul> <li>Select Sonic Adventure 2 for the game you are modding.</li> <li>Select Template - PC - SA2</li> <li>Click Create Project (The game should ask you where your Sonic Adventure 2 Folder is the first time around, that is where the game loads.) </li> </ul> </li> <li>Let the game split all the project files as necessary. You should have a complete project with everything exported.</li> </ol>"},{"location":"RefChaoFiles/","title":"Chao File names","text":"<p>Below, you will find a table of the sa2mdl| filenames for every Chao, along with what the filenames represent - Note that this is subject to change by SA Tools.</p> <p>Note: Chao that have the word \"zero\" associated with them are Chao that do not have stat influence on evolution. Chao that have the word \"Neutral\" as the first word are secondary evolution Chao without stat influences.</p> Chao File Name Chao Type al_amy.sa2mdl Amy Character Chao al_dcf.sa2mdl Dark Child Fly al_dchaos.sa2mdl Dark Chaos Chao al_dcn.sa2mdl Dark Child Normal al_dcp.sa2mdl Dark Child Power al_dcr.sa2mdl Dark Child Run al_dcs.sa2mdl Dark Child Swim al_dcz.sa2mdl Dark Child Zero al_dff.sa2mdl Dark Fly Fly al_dfn.sa2mdl Dark Fly Normal al_dfp.sa2mdl Dark Fly Power al_dfr.sa2mdl Dark Fly Run al_dfs.sa2mdl Dark Fly Swim al_dfz.sa2mdl Dark Fly Zero al_dnf.sa2mdl Dark Neutral Fly al_dnn.sa2mdl Dark Neutral Normal al_dnp.sa2mdl Dark Neutral Power al_dnr.sa2mdl Dark Neutral Run al_dns.sa2mdl Dark Neutral Swim al_dnz.sa2mdl Dark Neutral Zero al_dpf.sa2mdl Dark Power Fly al_dpn.sa2mdl Dark Power Normal al_dpp.sa2mdl Dark Power Power al_dpr.sa2mdl Dark Power Run al_dps.sa2mdl Dark Power Swim al_dpz.sa2mdl Dark Power Zero al_drf.sa2mdl Dark Run Fly al_drn.sa2mdl Dark Run Normal al_drp.sa2mdl Dark Run Power al_drr.sa2mdl Dark Run Run al_drs.sa2mdl Dark Run Swim al_drz.sa2mdl Dark Run Zero al_dsf.sa2mdl Dark Swim Fly al_dsn.sa2mdl Dark Swim Normal al_dsp.sa2mdl Dark Swim Power al_dsr.sa2mdl Dark Swim Run al_dss.sa2mdl Dark Swim Swim al_dsz.sa2mdl Dark Swim Zero al_hcf.sa2mdl Hero Child Fly al_hchaos.sa2mdl Hero Chaos Chao al_hcn.sa2mdl Hero Child Normal al_hcp.sa2mdl Hero Child Power al_hcr.sa2mdl Hero Child Run al_hcs.sa2mdl Hero Child Swim al_hcz.sa2mdl Hero Child Zero al_hff.sa2mdl Hero Fly Fly al_hfn.sa2mdl Hero Fly Normal al_hfp.sa2mdl Hero Fly Power al_hfr.sa2mdl Hero Fly Run al_hfs.sa2mdl Hero Fly Swim al_hfz.sa2mdl Hero Fly Zero al_hnf.sa2mdl Hero Neutral Fly al_hnn.sa2mdl Hero Neutral Normal al_hnp.sa2mdl Hero Neutral Power al_hnr.sa2mdl Hero Neutral Run al_hns.sa2mdl Hero Neutral Swim al_hnz.sa2mdl Hero Neutral Zero al_hpf.sa2mdl Hero Power Fly al_hpn.sa2mdl Hero Power Normal al_hpp.sa2mdl Hero Power Power al_hpr.sa2mdl Hero Power Run al_hps.sa2mdl Hero Power Swim al_hpz.sa2mdl Hero Power Zero al_hrf.sa2mdl Hero Run Fly al_hrn.sa2mdl Hero Run Normal al_hrp.sa2mdl Hero Run Power al_hrr.sa2mdl Hero Run Run al_hrs.sa2mdl Hero Run Swim al_hrz.sa2mdl Hero Run Zero al_hsf.sa2mdl Hero Swim Fly al_hsn.sa2mdl Hero Swim Normal al_hsp.sa2mdl Hero Swim Power al_hsr.sa2mdl Hero Swim Run al_hss.sa2mdl Hero Swim Swim al_hsz.sa2mdl Hero Swim Zero al_knuckles.sa2mdl Knuckles Character Chao al_ncf.sa2mdl Neutral Child Fly al_nchaos.sa2mdl Neutral Chaos Chao al_ncn.sa2mdl Neutral Child Normal al_ncp.sa2mdl Neutral Child Power al_ncr.sa2mdl Neutral Child Run al_ncs.sa2mdl Neutral Child Swim al_ncz.sa2mdl Neutral Child Zero al_nff.sa2mdl Neutral Fly Fly al_nfn.sa2mdl Neutral Fly Normal al_nfp.sa2mdl Neutral Fly Power al_nfr.sa2mdl Neutral Fly Run al_nfs.sa2mdl Neutral Fly Swim al_nfz.sa2mdl Neutral Fly Zero al_nnf.sa2mdl Neutral Normal Fly al_nnn.sa2mdl Neutral Normal Normal al_nnp.sa2mdl Neutral Normal Power al_nnr.sa2mdl Neutral Normal Run al_nns.sa2mdl Neutral Normal Swim al_nnz.sa2mdl Neutral Normal Zero al_npf.sa2mdl Neutral Power Fly al_npn.sa2mdl Neutral Power Normal al_npp.sa2mdl Neutral Power Power al_npr.sa2mdl Neutral Power Run al_nps.sa2mdl Neutral Power Swim al_npz.sa2mdl Neutral Power Zero al_nrf.sa2mdl Neutral Run Fly al_nrn.sa2mdl Neutral Run Normal al_nrp.sa2mdl Neutral Run Power al_nrr.sa2mdl Neutral Run Run al_nrs.sa2mdl Neutral Run Swim al_nrz.sa2mdl Neutral Run Zero al_nsf.sa2mdl Neutral Swim Fly al_nsn.sa2mdl Neutral Swim Normal al_nsp.sa2mdl Neutral Swim Power al_nsr.sa2mdl Neutral Swim Run al_nss.sa2mdl Neutral Swim Swim al_nsz.sa2mdl Neutral Swim Zero al_tails.sa2mdl Tails Character Chao"},{"location":"TestingMods/","title":"Tips for beginners: Testing Mods","text":"<p>More often than not, you'll finish a mod and want to test it right away to see if everything is in order.  This page gives you some insight on how to test your mod.</p>"},{"location":"TestingMods/#sa2-modloader-settings","title":"SA2 ModLoader Settings","text":"<p>The following settings are what I (Nostalgia Ninja) personally use:</p> <p>1) Console Debug - This allows you to see any errors and determine where your mod crashes if it does. Usually you'd find issues when initializing Chao World (entering the stage from stage select or after a stage if you've collected a Chao Key)</p> <p>2) Crash Handler - This should be turned on by default. If your game crashes, it will dump the contents of your crash information into the CrashDump, along with your ModLoader items in their order. This helps more experienced people to help you if in case you get stuck with your mod and you ask for help.</p> <p>3) Test Spawn Level - This allows you to open the game and load directly into a stage (example: Chao World) - This is useful if you know your mod works and just want to test certain parameters at a time.</p> <p>4) Play - runs the game starting you directly into the Test Spawn.</p>"},{"location":"TestingMods/#tips-for-debugging-issues-in-your-game","title":"Tips for debugging issues in your game","text":"<p>In the code, <code>PrintDebug()</code> allows you to print a string or value by adding in parameters to check. Don't forget to cast your types into C-Strings as the function accepts a <code>char *</code> argument.</p>"},{"location":"TestingMods/#chao-world-extended-debug-configurations","title":"Chao World Extended debug configurations:","text":"<p>To check if your Black Market items work, use the Black Market Debug Menu. While in the Black Market, press X and Y on the gamepad (or yellow and blue inputs on the keyboard) to access. Use the category selector to pick the category of your Black Market item, and then find your Black Market item.</p> <p></p>"},{"location":"TreeModding/","title":"Tree Mods","text":""},{"location":"TreeModding/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Have completed the Making a DLL Project section *version 4.1 of Blender<ul> <li>Blender SAIO plugin v2.1.5</li> </ul> </li> <li>Intermediate 3D Theory</li> <li>Basic C++ Programming skills</li> <li>SA Tools (Make sure you've created an SA Tools Project!)</li> <li>Chao World Extended (Versions &gt; 9.5)</li> <li>An existing fruit mod.</li> <li>Patience</li> </ul> <p>Tools can be downloaded here</p>"},{"location":"TreeModding/#what-is-a-tree","title":"What is a \"Tree\"?","text":"<p>Custom trees are an extension of the classic style of trees given to you by Sonic Adventure 2, where a Chao can dig up a patch of ground, place a seed, and watch the tree grow. Custom trees can grow garden fruit, or a custom fruit of your choice. Custom trees were introduced in Chao World Extended 9.5, alongside the API functions given to us.</p>"},{"location":"TreeModding/#modelling","title":"Modelling","text":""},{"location":"TreeModding/#before-we-start","title":"Before we start:","text":"<ul> <li>Delete all default scene objects! These objects will crash your game if you do not delete them.</li> <li>Make sure SAIO is up to date! As of writing, SAIO 2.1.5 is the most recent. Keeping SAIO and Blender up-to-date will help anyone helping you eliminate issues.</li> <li>Make sure SAIO is enabled in the Addons menu! If not, go to Edit -&gt; Preferences and go to the Addons menu to install/enable \"Import-Export: Sonic Adventure I/O\"</li> <li>If SAIO errors out on any operation, and it complains about .NET runtime, install the Microsoft .NET Runtimes as instructed by the SAIO Documentation.</li> </ul>"},{"location":"TreeModding/#models-you-will-need","title":"Models you will need:","text":"<ul> <li>A seed model</li> <li>A young tree/sapling</li> <li>An adult tree</li> <li>A dying tree</li> <li>Your already existing fruit mod.</li> </ul> <p>Import the trees from <code>Chao/Trees</code> in your SA Tools Project Folder as a reference for the sizes of the default trees.</p> <p>Heads up!</p> <p>Trees interpolate their data between their states, so all tree models MUST Have the exact same amount of vertices, otherwise your game will crash!</p> <p>To assign a fruit location, create an Empty (Plain Axes is recommended) object in the place you want it. You are allowed a maximum of 3 fruit locations.</p> <p>a word of caution:</p> <p>Vertex paint your model, otherwise your vertex interpolation will be glitchy and your final models will look strange and stretched. If you don't want to vertex paint your model, just enter and exit vertex paint mode on every mesh you create.</p>"},{"location":"TreeModding/#code","title":"Code","text":"<p>We will be using our fruit mod from a previous section.</p> <p>In order to proceed, we will need a fruit mod. Take your existing fruit mod that you made from the Fruit Modding Documentation to get started. If you do not have a fruit mod. Make one by clicking the link to get started!</p> <p>In the <code>main.cpp</code> file, inside the <code>extern \"C\"</code> function, define your seed and your trees as ModelInfo, like you did your fruit.</p> <pre><code>ModelInfo* MDLExampleSeed;\nModelInfo* MDLSaplingExampleTree;\nModelInfo* MDLAdultExampleTree;\nModelInfo* MDLDeadExampleTree;\n</code></pre> <p>Create a Black Market Attributes for your seed.</p> <pre><code>BlackMarketItemAttributes BMExampleSeed = { 500, 250, 0, -1, -1, 0 };\n</code></pre> <p>Inside the <code>CWELoad</code> function:</p> <p>Create the <code>CWE_API_TREE_DATA</code> for your tree:</p> <pre><code>        CWE_API_TREE_DATA ExampleTree =\n        {\n            MDLExampleSeed-&gt;getmodel(),\n            MDLSaplingExampleTree-&gt;getmodel(),\n            MDLAdultExampleTree-&gt;getmodel(),\n            MDLDeadExampleTree-&gt;getmodel(),\n            &amp;texList_ExampleTree,\n            \"Exampletree\",\n            0,\n            { ExampleFruitID, ExampleFruitID, ExampleFruitID }\n        };\n</code></pre> <p>Let's break this data structure down:</p> <p><code>CWE_API_TREE_DATA</code> - this is a struct which defines the tree inside of the CWE API which contains the following, in the following order:</p> <ul> <li> <p>pSeedObj - Your seed model.</p> </li> <li> <p>pSaplingObj - Your young tree model.</p> </li> <li> <p>pAdultObj - Your fully grown (fruit bearing) tree.</p> </li> <li> <p>pDeadObj - Your dying tree model.</p> </li> <li> <p>pTexlist - Your texture list for the tree. Making this separate from the fruit is possible and recommended. Just use the same steps to create a custom texture file for this.</p> </li> <li> <p>ID - This is a text ID, Not used yet, but will potentially be used in the future.</p> </li> <li> <p>Flags - Unused - Keep at 0</p> </li> <li> <p>FruitIDs[3] - Here you can place multiple fruit on the tree, if you want to just use one fruit, just use the same fruit object three times.</p> </li> </ul> <p>Finally, Add the Chao seed by using the following code:</p> <pre><code>cwe_api-&gt;AddChaoTree(ExampleTree, &amp;BMExampleTree, \"Example Seed\", \"Produces your fruit!\");\n</code></pre>"},{"location":"TreeModding/#building-the-project","title":"Building the Project:","text":"<p>Since your fruit mod was already set up, all you need to do is click on Build -&gt; Build Solution, or press F6.</p>"},{"location":"TreeModding/#creating-the-mod","title":"Creating the mod:","text":"<p>If you haven't followed Making a Project, set up your mod folder. Copy the DLL file from inside your release folder into your mod folder and edit your \"mod.ini\" file to contain your DLLFile. For example:</p> <pre><code>DLLFile=ExampleMod.dll\n</code></pre> <p>Place your .SA2MDL models inside the mod folder.</p> <p>Add a folder in your mod directory called \"gd_PC\", and inside that folder, add another directory called \"PRS\". Inside the \"PRS\" folder, add your <code>.PAK</code> texture files.</p> <p>Save your \"mod.ini\" file and test your mod!</p>"},{"location":"beginCode/","title":"Tips for beginners: Code","text":"<p>Most of the code is given in a sample format. While people can try to help you with the sample code, sometimes a little more of an experienced hand is needed.</p> <p>It would be recommended you at least understand up to Pointers and References in C++ for these guides. It would eliminate as many headaches that come from asking for help.</p>"},{"location":"beginCode/#tip-1-following-structs","title":"Tip 1: Following structs","text":"<p>At any time if you see a green colored word (Usually a struct or a datatype), you can Ctrl+Left Button click on it to follow where it takes you. Let's take an example:</p> <pre><code>static bool ExampleChaoEvolve(ObjectMaster* tp)\n</code></pre> <p>Here, we see <code>ObjectMaster*</code> is a struct datatype. Let's Ctrl+Left Button click that.</p> <p>Now you get taken to <code>SA2Structs.h</code> with the <code>ObjectMaster</code> struct highlighted. There's a lot of information here that can be confusing at first. Let's focus on <code>Data1Ptr</code>. Ctrl+Left Button click on that.</p> <p>It now takes us to the <code>Data1Ptr</code> declaration. Interestingly, we see <code>ChaoData1</code>. Let's Ctrl+Left Button click that.</p> <p>Now we're inside the Chao Data structure. Here we can see some interesting keywords like <code>ChaoDataBase</code>. Let's Ctrl+Left Button click that.</p> <p>now we're inside ChaoDataBase. This contains everything from your pips on a level for Chao, the Type of Chao, Which garden it is, if it's in the Kindergarten, etc. Here is where you can modify your Chao in code (useful for Fruit, or requirements for evolving a Character Chao).</p>"},{"location":"beginCode/#tip-2-following-the-examples","title":"Tip 2: Following the examples","text":"<p>If you're having trouble with creating a mod, check the example project on Github here. The examples are somewhat documented and give you an insight of where to place things. The example projects should give you a baseline structure of how a mod gets made.</p>"},{"location":"beginCode/#tip-3-debug-your-code","title":"Tip 3: Debug your code","text":"<p>If you're unsure where your code lands, place a <code>PrintDebug()</code> function down where you are thinking the code will land. If it lands there, then you know that area of code executes. If not, you can diagnose what issues you are running into. You can also use Visual Studio's debugger (you'll have to set that up first) to debug what's going on with your code.</p>"},{"location":"beginCode/#tip-4-leave-comments","title":"Tip 4: Leave comments","text":"<p>While you're writing your code, make sure to leave comments. This helps you find something in case you're stuck for later. Simply use <code>//</code> to start a comment block. If you want a multi-line comment block, use <code>/*</code> and <code>*/</code> respectively to open and close the comment block.</p>"},{"location":"beginSAIO/","title":"Tips for beginners: Sonic Adventure IO","text":"<p>So you're getting started with Sonic Adventure IO? Here are a few tips and tricks to get going as quickly as possible!</p> <p>Remember to check out the Sonic Adventure IO Reference Manual!</p>"},{"location":"beginSAIO/#what-is-blender-sonic-adventure-io","title":"What is Blender Sonic Adventure IO?","text":"<p>Blender Sonic Adventure IO (SAIO for short) is a Blender plugin made by Justin113D and the X-Hax Community used for general purpose model modding for Sonic Adventure DX and Sonic Adventure 2. It features a robust set of features, From basic model editing, Level editing features, and Texture editing features, to robust features like Path editing, internal texture editing (this means you don't even have to touch TextureEditor), animation, scene management and rendering.</p>"},{"location":"beginSAIO/#what-do-the-current-modding-guides-focus-on","title":"What do the current modding guides focus on?","text":"<p>Currently, the modding guide focuses on model editing, texture editing and some parts of internal texture editing.</p>"},{"location":"beginSAIO/#tip-1-texture-files-in-saio","title":"Tip 1: Texture files in SAIO","text":""},{"location":"beginSAIO/#creating-a-new-texture-file","title":"Creating a new texture file:","text":"<p>Texture files in SAIO provide easy asset management while also creating models. Once you import your models, go to SAIO Scene-&gt; Textures. Press the \"+ New\" button to get a setup of textures for your model.</p> <p>To add a texture, press the + button. Add your textures as you want to lay them out in your Sonic Adventure 2 texture file.</p> <p>Once you have added a texture, click the \"Image\" text area. A dropdown for scene-loaded textures will appear. Select your image.</p> <p>Name your slot what you would like to call your texture, make a unique Global Index for the texture and you should be done! Export your Texture File.</p>"},{"location":"beginSAIO/#importexport","title":"Import/Export:","text":"<p>If you press the dark gray down arrow button, you'll see options to Import or Export the texture file. Import a model by clicking \"Import texture Archive\". Export a model by using \"Export as texture Archive\".</p>"},{"location":"beginSAIO/#updating-material-textures","title":"Updating Material Textures:","text":"<p>There's an easy way to get your textures from Sonic Adventure 2 into Blender applied to your model:</p> <ul> <li> <p>Import your model (see above on how)</p> </li> <li> <p>got to SAIO Tools -&gt; Material and click \"Update Material Textures\". Click \"OK\" and then go into Viewport shading to see if the model corresponds to what you expect in-game.</p> </li> </ul> <p></p> <p>SAIO is smart enough to pick up your textures based off Texture IDs, but if it doesn't, you'll have to import it manually.</p>"},{"location":"beginSAIO/#tip-2-import-as-armature","title":"Tip 2: Import as Armature","text":"<p>There are times when you need an armature instead of a node-based model (Accessories for example). You can do this quickly without needing to import the node-based model and creating an \"Armature from Objects\"</p> <p>Here's how:</p> <p>1) go to SAIO Tools -&gt; Import -&gt; Import Model. 2) in the right pane of the model import dialog box, tick \"Import as Armature\"</p> <p></p>"},{"location":"beginTexturing/","title":"Tips for beginners: Texturing","text":"<p>Texturing your model brings your model to life with color. Blender's Texture Painting tools have a steep difficulty curve and sometimes are not the best tools for the job. You have options to work around this, though.</p>"},{"location":"beginTexturing/#tip-1-set-your-external-app","title":"Tip 1: Set your external app","text":"<p>This will be used for the later steps, so I decided to make this one on its own.</p> <p>Go to Edit -&gt; Preferences -&gt; File Paths -&gt; Applications. Find your image editor file path and browse to it. Save your preferences.</p>"},{"location":"beginTexturing/#tip-2-edit-externally","title":"Tip 2: Edit Externally","text":"<p>You'll find this in the \"Texture Paint\" Workspace. Go to Image -&gt; Edit Externally to open your external app with the texture. This will open your editor of choice and bring the texture file into it. Press Alt+R inside the texture area to reload the image once you're done.</p>"},{"location":"beginTexturing/#tip-3-quick-edit","title":"Tip 3: Quick Edit","text":"<p>Quick Edit is a handy tool to create a projection of your Blender scene to paint over it.  in the \"Texture Edit\" workspace, press N to bring up the properties panel on the right. Go to Tool -&gt; Options -&gt; External -&gt; Quick Edit. </p> <p>Wait for it to take a screenshot of the object and place it inside your external application.  Make the changes as necessary and save the image. Close your external editor.</p> <p>In Blender, click the \"Apply\" button to apply your quick edit.</p>"},{"location":"beginTexturing/#tip-4-internal-shortcut","title":"Tip 4: internal shortcut","text":"<p>If you really have to work internally in Blender, the following keys will be a lifesaver:</p> <ul> <li>F - Brush Size</li> <li>Shift+F - Brush Opacity</li> <li>Ctrl click - erase</li> </ul> <p>Right clicking brings up a mini color picker that can be quickly used to change the swatch.</p>"},{"location":"beginUV/","title":"Tips for beginners: UV Unwrapping","text":"<p>UV Unwrapping is a difficult subject, but it doesn't have to be teeth-pulling all the time. Most of the times, if your model is simple enough, you can get away with cheating the UV system and keeping certain UV islands around for details.</p> <p>A useful tutorial to learning how to UV Unwrap from an environmental modeller is here!</p>"},{"location":"beginUV/#blender-plugins-recommended-but-not-needed-here","title":"Blender plugins recommended (but not needed here):","text":"<ul> <li>TexTools</li> <li>UV Packer</li> </ul>"},{"location":"beginUV/#tip-1-smart-uv-project","title":"Tip 1: Smart UV Project","text":"<p>Blender has a neat tool inside of it called \"Smart UV Project.\" To access it, go to the \"UV Editing\" Workspace (it will automatically put you into Edit Mode), select the faces you wish to UV unwrap with the tool and press U. The UV Unwrapping menu should appear. Click \"Smart UV Project\"</p> <p>There's a few things we can tweak here:</p> <ul> <li>Angle Limit - The limit of which the UV will create a new UV island.</li> <li>Island Margin - How far from the edge of your texture map you'd like your UV islands to appear.</li> <li>Area Weight - How large the UV islands will be.</li> </ul>"},{"location":"beginUV/#tip-2-scale-by-0","title":"Tip 2: Scale by 0","text":"<p>You can cheat a little if you just want a single main color by scaling by 0. Select a UV island, press S and then hit the 0 key. This will scale everything into a single point which you can use to color your objects as a single color. This allows the texture size to be really small (as small as sizes as 1x1), but effective for simpler projects where you only need solid colors.</p>"},{"location":"beginUV/#tip-3-export-uv-layout","title":"Tip 3: Export UV Layout","text":"<p>If you want to use your UV layout in an image editor to work on details, go to UV -&gt; Export UV Layout. It will take the selected faces and export it into an image the size of your texture.</p>"},{"location":"credits/","title":"Credits","text":"<p>Documentation made by Nostalgia Ninja</p> <p>A special thank you to all the following people:</p>"},{"location":"credits/#mod-creators-and-api-developers","title":"Mod creators and API developers","text":"<ul> <li> <p>Chao World Extended Team (Darkybenji, Exant, Mindacos, CGBuster, Shaddatic, Krzys2, AWildDaydreamer, Justin113D, Eru)</p> </li> <li> <p>Shaddatic (Enhanced Chao World)</p> </li> <li> <p>Justin113D (SAIO)</p> </li> </ul>"},{"location":"credits/#information","title":"Information","text":"<ul> <li>Sonic Adventure hacking community (X-Hax)</li> </ul>"},{"location":"credits/#proofreading","title":"Proofreading","text":"<ul> <li>Emm</li> </ul>"},{"location":"credits/#support-and-testing","title":"Support and Testing","text":"<ul> <li>Eru (Lenses, Discord channel support)</li> <li>debugmode404 (Testing)</li> <li>BassboostedMoonChao (Media, testing)</li> <li>Soephond (Example Code)</li> <li>Choa (Testing, Finding an issue in Fruit Mods to fix)</li> <li>Jbrydab (Initial install notes)</li> <li>RAYTRAC3R, Exant (Accessory code for Character Chao)</li> </ul>"},{"location":"credits/#reference","title":"Reference","text":"<ul> <li>PyraBlueArts (Cosmo Chao Reference)</li> </ul>"},{"location":"examples/","title":"Example mods","text":""},{"location":"examples/#example-cwe-mods-with-sample-code","title":"Example CWE Mods with sample code:","text":"<ul> <li>Hats</li> <li>Fruit</li> <li>Accessory</li> <li>Animal</li> <li>Tree</li> <li>Custom Chao</li> <li>Special - Lens</li> <li>Fortune Teller Name</li> </ul>"},{"location":"resources/","title":"Resources:","text":"<p>You are encouraged to download these tools and use these resources in order to make your Chao World modding experience easier:</p>"},{"location":"resources/#required-tools","title":"Required Tools","text":"<ul> <li>SA Tools</li> <li>Visual Studio</li> </ul>"},{"location":"resources/#modelling","title":"Modelling","text":"<ul> <li>Blender</li> <li>SAIO Blender Plugin</li> </ul>"},{"location":"resources/#mods","title":"Mods","text":"<ul> <li>Chao World Extended</li> <li>Shaddatic's Enhanced Chao World</li> </ul>"},{"location":"resources/#mod-apis","title":"Mod APIs","text":"<ul> <li>CWE API</li> </ul>"},{"location":"resources/#modding-tools","title":"Modding tools","text":"<ul> <li>Krzys2 Chao Editor</li> </ul>"},{"location":"resources/#necessary-modding-libraries","title":"Necessary modding libraries","text":"<ul> <li>LibModUtils</li> <li>SA2Modloader includes</li> </ul>"},{"location":"resources/#additional-documentation","title":"Additional Documentation","text":"<ul> <li>Blender Manual</li> <li>SAIO Documentation</li> <li>SA2 Modding Guide</li> <li>Chao Pallete and texture guides</li> </ul>"},{"location":"resources/#useful-mod-code","title":"Useful mod code","text":"<ul> <li>Chao World Extended Source Code</li> <li>Soephond's Chao Mission Source Code</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Below, are all the common issues that you'll have with your mods:</p>"},{"location":"troubleshooting/#issue-1-texture-file-not-found","title":"Issue 1: Texture File Not Found","text":"<p>Oh No! Your game has crashed! Something's wrong with your mod!</p> <p>Not to worry! We have things that we can check!</p> <p>A common crash would be that the texture file fails to load, and the game crashes. The following would usually resolve the issue:</p> <ul> <li> <p>Check if your filename matches what you've written in code.</p> </li> <li> <p>Check if your TexList has enough space to load the texture file.</p> </li> <li> <p>DO NOT rename your texture file! Doing so causes the game to incorrectly find the file, and crashes the game. Instead, use the Save As option in TextureEditor, and make a new texture file with the name as given.</p> </li> </ul>"},{"location":"troubleshooting/#issue-2-model-file-not-found","title":"Issue 2: Model File Not Found","text":"<p>Chao World Extended checks for the model, and if it doesn't load, will give you the above image. This can be a combination of things:</p> <ul> <li> <p>The model can't be found in the location you specified. Place your model in the right directory and try again.</p> </li> <li> <p>Make sure your <code>pathStr</code> is pointing to the right place.  By default, the <code>pathStr</code> variable is as follows:</p> </li> </ul> <pre><code>std::string pathStr = std::string(path) + \"\\\\\";\n</code></pre> <p>This places it in the same place as where you put your <code>mod.ini</code> file.</p>"},{"location":"troubleshooting/#issue-3-character-chao-texture-index-is-out-of-bounds","title":"Issue 3: Character Chao - texture index is out of bounds","text":"<p>Chao World Extended checks your Character Chao model and it determines that your Texture Index is out of bounds. The following steps are required in order to fix it:</p> <ul> <li> <p>Load your texture file into SAIO (If you don't know how to do so, click here!)</p> </li> <li> <p>Once your texture file is loaded, scroll down and look for the last texture in the list. Note down the number, and add 1 to that.</p> </li> </ul> <p></p> <ul> <li>Now that you've got the amount of textures, update your variable to the noted number.</li> </ul> <p></p> <p>also, check the SAIO Material Properties on every object (including eyes, mouth and wings) and make sure that it is added to the texture file and inside the texture count.</p> <p></p>"},{"location":"troubleshooting/#issue-4-character-chao-number-of-nodes-is-not-40","title":"Issue 4: Character Chao - Number of Nodes is not 40","text":"<p>Chao World Extended checks your Character Chao model and it determines your model is not 40 nodes. The following steps are required in order to fix it:</p> <p>In Blender:</p> <ul> <li>Turn on statistics in your Overlay Menu:</li> </ul> <p></p> <ul> <li>Look at the total number of Objects. They should be 40, no more and no less!</li> </ul> <p></p> <ul> <li>If you don't have 40 objects, you may not have joined your objects together, or you may have mistakenly joined your objects together. To join objects, press Ctrl+J in Object Mode. to separate objects, press P in Edit Mode.</li> </ul> <p>Note: If you accidentally joined objects from the Chao Model together, you will have to restart from importing the Chao model, as you have destroyed node data that is important for the Chao model to function.</p>"},{"location":"troubleshooting/#issue-5-character-chao-wrong-chunk-type","title":"Issue 5: Character Chao - Wrong Chunk Type","text":"<p>Chao World Extended checks your Character Chao and determines that your model has an invalid vertex chunk type. The following steps are required in order to fix it:</p> <p>In Blender:</p> <ul> <li>Go to the Data menu, and open the Color Attributes dropdown. If you see anything in here, remove it by clicking the - button.</li> </ul> <p></p>"},{"location":"troubleshooting/#issue-6-fruit-mods-size-or-rotation-is-weird-in-black-market","title":"Issue 6: Fruit mods - Size or rotation is weird in Black Market","text":"<p>To Fix this, Import your completed model and apply your transformations.</p> <p>For Size:</p> <ul> <li>Apply the Scale transformations by selecting the model in Object mode and pressing Ctrl+A and applying by scale.</li> </ul> <p>For rotation:</p> <ul> <li>Apply all transformations by pressing Ctrl+A and applying by All.</li> </ul> <p>Note that applying all transformations will move the object origin to 0, 0, 0 in Blender World Space, so make sure your model is centered on the world origin before applying transformations.  If your model isn't centered, right click on your model and go to Set Origin -&gt; Origin to Geometry.</p>"},{"location":"troubleshooting/#issue-7-model-is-invisible-in-black-market","title":"Issue 7: Model is invisible in Black Market","text":"<p>This is a known bug in Sonic Adventure 2 where if a model has multiple meshes, the game will not render anything in the Black Market. To fix this:</p> <ul> <li>Import your completed model into Blender (Remember to remove all other objects beforehand.)</li> <li>select all objects</li> <li>select your primary object (to be neat about the join you're about to make)</li> <li>press Ctrl+J to join all the objects together.</li> </ul>"}]}